// Code generated by go-bindata.
// sources:
// sql/1497233022_initial_schema.down.sql
// sql/1497233022_initial_schema.up.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1497233022_initial_schemaDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\x48\x2c\x4a\xcc\x4d\x2d\x49\x2d\x2a\xb6\xe6\xe2\x42\x12\xcf\x2f\x48\x2d\x4a\x2c\xc9\x2f\x8a\xcf\xcc\x2b\x28\x2d\xc1\x21\x89\x26\x9c\x99\x9b\x98\x9e\x8a\x4d\x2c\xbe\x38\xb5\xb0\x34\x35\x2f\x19\x5d\xb2\x38\x39\x35\x0f\x5d\xac\xa0\x28\x3f\x2b\x35\x19\xc3\xc6\xa2\xf4\xc4\xbc\xcc\xaa\xc4\x92\xcc\xfc\xbc\x62\x6b\x2e\x40\x00\x00\x00\xff\xff\x6b\x14\xda\x4a\xc1\x00\x00\x00")

func _1497233022_initial_schemaDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1497233022_initial_schemaDownSql,
		"1497233022_initial_schema.down.sql",
	)
}

func _1497233022_initial_schemaDownSql() (*asset, error) {
	bytes, err := _1497233022_initial_schemaDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1497233022_initial_schema.down.sql", size: 193, mode: os.FileMode(436), modTime: time.Unix(1498357527, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1497233022_initial_schemaUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x94\xbf\x4e\xf3\x30\x14\xc5\xf7\x3c\xc5\x55\xa7\x44\xfa\x86\x7e\x20\x24\x24\xa6\xb4\x72\x4b\x20\xb8\xc8\x0d\x48\x9d\x22\x2b\xb9\x2a\x46\xd4\x0e\xae\x2b\x01\x4f\x8f\xfa\x27\x6d\x9d\x38\xad\x87\x2e\xcc\xc7\x3e\xfe\x9d\x63\x5f\x0f\x19\x89\x33\x02\x59\x3c\x48\x09\x28\x3d\xe7\x52\xfc\x70\x23\x94\x5c\x42\x18\x00\x00\x88\x12\x06\xc9\x78\x4a\x58\x12\xa7\xf0\xcc\x92\xa7\x98\xcd\xe0\x91\xcc\xfe\x6d\xd4\x9e\xe4\x0b\xec\xc1\x6b\xcc\x86\xf7\x31\x0b\xff\xf7\xfb\x11\xd0\x49\x06\xf4\x25\x4d\x83\xe8\x2e\x08\x2c\xff\x4a\xab\x77\x2c\x8c\x9f\xf5\x31\x4c\xbe\x5d\x9a\xd0\x6c\xef\x7e\xfe\xfc\xed\x8a\xd1\x84\x91\x64\x4c\xd7\xbe\x10\x36\x3c\x23\x60\x64\x44\x18\xa1\x43\x32\xb5\xc3\x87\xa2\x8c\xda\xfc\xcb\x02\x25\xfa\xd1\xef\xa2\x5e\x0a\xfc\x60\x67\x31\xd7\x85\xba\x71\xc5\x82\xcf\x31\x5f\xe2\xe7\x0a\x65\xf1\xd7\xb8\xfd\x70\xed\x88\x97\xa2\x6e\xb9\x5a\xf0\x8d\x5a\xdd\x19\x54\x85\x9a\x1b\xa5\xfd\x62\x6c\x1e\x56\x27\x7d\xa1\xa4\xc1\x2f\x73\x84\xdf\xa4\x37\xdf\x15\xee\xe5\x9b\x96\x7c\x3e\x7e\xc5\x35\x5f\xa0\x41\x9d\x6b\xa5\x0c\x3c\x4c\x27\xf4\x54\x41\x35\xaf\xd5\xcb\x76\x3a\x4e\xd7\x91\x0b\x59\xad\x7c\x3f\x80\xfd\x9e\x8e\x5e\x36\x5e\x9d\xaa\x3d\xf8\x07\x2f\x7b\xe8\xeb\x6b\x5a\x63\xbb\x5e\xc2\xee\x88\xee\x4d\x8e\x5f\xae\xee\xb2\x8e\xe9\x08\xd2\x0a\x5b\xbc\x89\x8f\x52\xa3\x74\x55\xdf\x53\xba\x44\x7d\xb8\xbf\xab\xfe\xf5\xad\x0b\xd6\x2b\xe4\x9a\xf7\x37\x00\x00\xff\xff\xcc\xad\x4d\xc6\xf5\x05\x00\x00")

func _1497233022_initial_schemaUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1497233022_initial_schemaUpSql,
		"1497233022_initial_schema.up.sql",
	)
}

func _1497233022_initial_schemaUpSql() (*asset, error) {
	bytes, err := _1497233022_initial_schemaUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1497233022_initial_schema.up.sql", size: 1525, mode: os.FileMode(436), modTime: time.Unix(1498357427, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1497233022_initial_schema.down.sql": _1497233022_initial_schemaDownSql,
	"1497233022_initial_schema.up.sql":   _1497233022_initial_schemaUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"1497233022_initial_schema.down.sql": &bintree{_1497233022_initial_schemaDownSql, map[string]*bintree{}},
	"1497233022_initial_schema.up.sql":   &bintree{_1497233022_initial_schemaUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
