// Code generated by go-bindata.
// sources:
// sql/1497233022_initial_schema.down.sql
// sql/1497233022_initial_schema.up.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1497233022_initial_schemaDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcc\x4d\x0a\xc2\x40\x0c\xc5\xf1\x7d\x4f\xd1\x7b\xcc\x4a\x69\x17\x82\xa8\x88\x0b\x77\x61\x68\x1f\x25\x42\x93\x9a\x8c\x45\x3c\xbd\x30\xc5\xaf\x71\x17\xf2\xfe\xfc\x9a\xe3\xfe\x50\x6f\x76\x4d\x7b\xae\xb9\xbf\x93\x41\x7a\x18\xe9\x04\x8b\x49\xcd\x89\xbc\x83\x80\xb8\x7f\x5d\x33\xcc\x59\x85\xde\x4d\xde\x12\x8f\x08\x55\xc6\x4e\xab\xf5\xb6\xad\x17\xc8\x3f\x52\xa8\xbe\xe7\xc5\xc2\x0c\x49\x1e\xfe\x86\x22\xe6\x31\x0e\xf8\xcd\xf2\x8b\x1c\xd7\x1b\xa4\x2b\xfb\xc9\xf4\x82\xae\x80\xd5\x86\x28\xfc\x88\x89\x55\x3c\x54\xcf\x00\x00\x00\xff\xff\x1c\x68\x3a\xf2\xf8\x00\x00\x00")

func _1497233022_initial_schemaDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1497233022_initial_schemaDownSql,
		"1497233022_initial_schema.down.sql",
	)
}

func _1497233022_initial_schemaDownSql() (*asset, error) {
	bytes, err := _1497233022_initial_schemaDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1497233022_initial_schema.down.sql", size: 248, mode: os.FileMode(420), modTime: time.Unix(1499017873, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1497233022_initial_schemaUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\xdf\x4f\xe3\x46\x10\x7e\xe7\xaf\x18\x9d\xf2\x00\x92\x83\x8e\xa3\xbd\x87\x5e\xd3\x2a\x24\x0b\xe7\x96\x73\x5a\x27\x69\x8b\xaa\xca\xda\xd8\x93\x78\x7b\xf6\xae\xd9\x1f\x24\xe6\xaf\xaf\x76\x6d\x13\x3b\x90\x23\x50\x78\x21\xda\xdd\xef\x9b\x99\x6f\x66\x3e\x8f\x42\x32\x9c\x11\x98\x0d\x2f\xae\x09\x08\xb9\xa2\x9c\xdd\x53\xcd\x04\x57\x70\x7c\x04\x00\xc0\x12\xb8\xf0\xaf\xa6\x24\xf4\x87\xd7\xf0\x5b\xe8\x7f\x19\x86\x37\xf0\x2b\xb9\xf1\xdc\xed\x3b\x4e\x73\x7c\x07\x7f\x0c\xc3\xd1\xe7\x61\x78\x7c\xf6\xfe\xfd\x09\x04\x93\x19\x04\xf3\xeb\xeb\xa3\x93\x4f\x47\x1d\xfa\x42\x8a\x7f\x31\xd6\x87\x31\xb7\x73\x89\xaa\xa7\x7e\x30\x7b\x20\x7f\x3e\x7c\xf5\xe2\x72\x12\x12\xff\x2a\xb0\xbc\x70\xbc\xc3\x79\x02\x21\xb9\x24\x21\x09\x46\x64\xda\xad\xfd\x98\x25\x27\x36\xfd\x6e\xfe\x2c\xa7\x2b\x8c\x14\xde\x1a\xe4\x31\x1e\x56\x46\x5d\xf3\x5b\x55\xb0\xa5\xeb\x24\xdf\x28\xdb\xe4\xfd\x38\xed\xc3\xb2\xed\x56\xf8\x56\x49\x3f\x62\xed\xe4\xbe\xa3\xea\x83\xf4\xfd\x67\xfe\x8e\xfa\x7d\xb8\xc0\x15\xe3\x10\x08\x99\xd3\x8c\xdd\x63\x02\x93\x02\x25\xd5\x42\xaa\xe7\xe1\x1d\x8d\x54\x8c\xfc\x8d\x3a\x7a\x87\x52\x31\xc1\xe1\x35\xb2\x89\x26\x7d\xf8\x65\x3a\x09\xde\x7a\x10\x5c\x91\x11\xde\x21\x3f\x70\x07\x2b\xc0\xbe\x42\x13\xb1\xe6\xd1\xfe\x6a\xdd\x75\x9c\x52\xbe\xc2\x28\xa1\x9a\x3e\x55\x92\x29\xbe\x41\x60\x8a\xe7\xe0\x1d\x45\x9a\x64\x3b\x7a\x54\x7d\xb5\x6a\x54\x88\x7e\x1f\x66\x93\xf1\xe4\x07\x98\xa6\xc2\x64\x09\x54\x01\xc0\x05\x58\x20\x30\x1e\x67\x26\xc1\x04\x18\x07\x9d\xa2\xb2\x27\x09\x8b\x51\xfd\x0c\x3e\xe8\x94\xf1\xaf\xc0\x34\xac\x59\x96\xc1\x22\x13\xeb\x2e\xa5\x30\xda\x82\x2c\x04\x37\xa0\xd8\x3d\x2a\xd0\x42\x40\x6e\xe2\x14\xb4\xb0\xfc\x6b\x21\x75\x0a\x4c\x9f\x36\xc8\x29\xb9\x26\xa3\x59\x47\x4a\xef\xb1\x72\x7f\x7e\x26\x21\x79\xe8\xc6\xa0\x77\x06\x93\x70\x4c\x42\xb8\xb8\xe9\x36\x61\x4c\xa6\x23\xc7\x3c\x0f\xfc\xdf\xe7\x64\xab\x89\xd7\x79\xb7\xd5\xa2\x0e\xbf\x6d\x83\xb7\xab\xfa\x37\x42\xb7\x9a\x37\xdc\x1b\x77\xfb\xc8\xcd\xe3\x21\x4b\x4d\x78\xf2\xca\x95\x7e\x81\x67\x8c\x91\xbf\x2a\x44\xbf\xdf\x86\x02\xe5\x09\x24\xa6\xc8\x58\x4c\x75\x3d\x46\x4b\x29\xf2\xed\x22\x7b\xa0\x85\x05\x49\xa4\x49\x5f\x14\x9a\xe5\x16\xb6\x14\x12\x96\x54\x69\x90\xa8\x0a\xc1\x15\xf6\x35\xcb\xd1\x0e\x49\x2c\xf2\xc2\x68\xf7\x53\x22\x4f\x50\x9e\x5a\x74\x20\x34\x18\xc5\xf8\xca\x22\x91\xad\x38\x7c\xc5\xd2\x4e\x17\xb4\xaa\x68\x62\x82\xa6\x8b\x0c\x95\x67\x81\x0b\x8c\xa9\x51\xe8\xe6\x72\x9d\x8a\x0c\xa1\x10\x8c\x6b\x60\x0e\x7c\x6b\x50\x96\x6e\x5e\x0b\x1b\x8b\xeb\xac\x3c\x7d\xa1\x71\x56\x49\xaa\x68\xeb\x5c\xff\xdf\x58\xaa\xdb\xfd\xc6\x60\x37\xce\x2d\xa7\xe0\x59\x09\xb9\x51\xda\xee\x96\xe1\xec\xd6\x60\xbd\xb9\x10\x0b\xae\x71\xa3\x41\x2c\x81\x56\x84\x9f\x20\x76\x2b\x5f\x48\xb1\xa0\x8b\xac\xb4\x18\x0a\xf3\xb9\x3f\xee\x58\xaf\xcd\xaa\x71\xe8\xf3\x0f\xbb\x06\xed\xda\xb4\x9b\xb4\x4d\x68\xee\xba\x53\xdf\xb4\x55\xbf\xa3\x99\x41\xe0\x88\x89\x93\x1c\x37\x34\xd6\x36\x6b\xaa\xe3\xb4\xeb\x1f\x17\xc2\xf0\xc4\xb2\x2c\xc4\xa6\xd2\x41\x53\xa9\xa3\xcd\x13\x0a\x54\x37\xe5\x93\x37\xa2\xd8\x03\x11\xc5\x93\x08\xc6\x0b\x63\xbf\x23\xaa\x5d\xf6\xdf\xff\xec\xbc\x2a\xa8\xa4\x39\x6a\xdc\xfd\x34\x55\x4b\xdd\x18\xc9\x03\x97\xd7\x06\x5c\x86\x93\x2f\xf5\xa0\x6c\xe7\xc4\xa2\xba\xe6\x02\x03\xe8\x9d\xc1\x30\x18\xef\x0c\xc0\x00\x7a\x1f\xdc\x71\xbb\x45\x03\xe8\x9d\xbb\x43\xd7\x91\x01\xf4\xbe\xb3\x84\x15\xba\x96\xed\xc7\x01\xf4\xbe\x6f\x9d\x94\x9d\x13\x27\xd3\x4f\x03\xe8\x7d\xdc\x1e\x94\xd5\x81\x65\x1a\x09\xae\xb4\xa4\x76\x57\xec\x57\x5b\x41\x4a\xef\xec\xbc\xe4\x74\x03\x19\xf2\x95\x4e\xed\x68\x7d\x3c\x87\x45\xa9\x51\x79\x40\x97\x1a\x25\xac\x53\x16\x5b\x7f\x77\xfb\x25\x0d\xb7\xae\x90\x34\x0b\xe3\x07\x63\xf2\x17\xb0\x64\x13\xed\x6a\x11\x45\x8d\x06\xcd\xaf\xba\xf6\x28\x6a\xd5\x1c\x45\x9a\xe5\xae\x19\x93\xe0\xf1\xde\x55\xfe\x3b\xf5\x83\x2b\x58\x68\x89\xd8\x36\xe1\x0e\xa7\xd7\xd6\xd1\x73\xfa\x79\x8d\x66\xcd\x8f\xd2\xab\x15\xaa\xff\x97\x2f\xb0\xee\xd7\x3a\xeb\x7f\x01\x00\x00\xff\xff\x05\x59\x1a\xc0\x8a\x0c\x00\x00")

func _1497233022_initial_schemaUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1497233022_initial_schemaUpSql,
		"1497233022_initial_schema.up.sql",
	)
}

func _1497233022_initial_schemaUpSql() (*asset, error) {
	bytes, err := _1497233022_initial_schemaUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1497233022_initial_schema.up.sql", size: 3210, mode: os.FileMode(420), modTime: time.Unix(1499018040, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1497233022_initial_schema.down.sql": _1497233022_initial_schemaDownSql,
	"1497233022_initial_schema.up.sql":   _1497233022_initial_schemaUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"1497233022_initial_schema.down.sql": &bintree{_1497233022_initial_schemaDownSql, map[string]*bintree{}},
	"1497233022_initial_schema.up.sql":   &bintree{_1497233022_initial_schemaUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
