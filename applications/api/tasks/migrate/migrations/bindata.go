// Code generated by go-bindata.
// sources:
// sql/1497233022_initial_schema.down.sql
// sql/1497233022_initial_schema.up.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1497233022_initial_schemaDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8c\x41\xaa\xc2\x50\x0c\x45\xe7\x5d\x45\xf7\xf1\x46\xff\xd3\x0e\x04\x51\x11\x07\xce\x42\x68\x2f\x25\x62\x93\x9a\x3c\x45\x5c\xbd\xf0\x44\xb0\xed\x2c\xdc\x73\x72\x9a\xe3\xfe\x50\x6f\x76\x4d\x7b\xae\xa5\x7f\x92\x43\x7b\x38\x4d\xec\x3c\x22\xc3\x83\x28\x3a\x28\x48\xfa\xef\xf5\x80\x87\x98\x12\xd9\x04\xe7\x6c\x5e\x58\x96\x11\xa9\x2a\xb5\xd3\xdf\xff\xb6\xad\x57\xa5\x54\xfd\xe2\x4f\xeb\x6a\x43\xa4\xd5\xbc\x50\x65\xe4\x01\x73\xad\x4c\x14\xb8\xdd\xa1\xdd\xd2\x9f\xdc\x2e\xe8\xf2\xfc\xc3\x7c\x60\x95\x17\x67\x31\x8d\x54\xbd\x03\x00\x00\xff\xff\x1d\xd1\xa8\x90\xf7\x00\x00\x00")

func _1497233022_initial_schemaDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1497233022_initial_schemaDownSql,
		"1497233022_initial_schema.down.sql",
	)
}

func _1497233022_initial_schemaDownSql() (*asset, error) {
	bytes, err := _1497233022_initial_schemaDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1497233022_initial_schema.down.sql", size: 247, mode: os.FileMode(420), modTime: time.Unix(1498788502, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1497233022_initial_schemaUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x95\x5f\x6f\x9b\x3c\x14\xc6\xef\xf3\x29\x8e\x7a\x95\x48\x50\xf5\xbd\x7d\x77\x31\xd1\xc4\xed\xd8\x32\xd3\x91\x64\x5a\x35\x4d\x96\x0b\x27\xd4\x1b\xd8\xd4\x36\xdd\xda\x4f\x3f\x19\x42\x03\xcd\xb2\xfc\x51\xb4\x5e\xa1\xe2\xe7\x9c\xe7\xf7\xf8\x1c\x32\x8e\x49\x30\x27\x30\x0f\x2e\xa7\x04\x94\xce\xb8\x14\xcf\xdc\x0a\x25\x0d\x0c\x07\x00\x00\x22\x85\xcb\xf0\x7a\x46\xe2\x30\x98\xc2\x4d\x1c\x7e\x0c\xe2\x5b\xf8\x40\x6e\xbd\xfa\xed\x99\xe4\x05\x9e\xc1\xe7\x20\x1e\xbf\x0b\xe2\xe1\x7f\x17\x17\x23\xa0\xd1\x1c\xe8\x62\x3a\x1d\x8c\xde\x0c\x7a\xe5\x4b\xad\xbe\x63\x62\xf7\xab\xdc\xf5\xc2\x9a\xa3\x21\x9d\xbf\x14\xdf\xdd\xbe\x39\x71\x15\xc5\x24\xbc\xa6\xae\x2e\x0c\x5f\xd5\x1c\x41\x4c\xae\x48\x4c\xe8\x98\xcc\xfa\xec\x43\x91\x8e\x9c\xfd\xbe\x7f\x51\xf0\x0c\x99\xc1\x87\x0a\x65\x82\xfb\x61\xac\x98\x4f\x45\xb0\x2e\xd7\x33\xdf\x26\xdb\xfa\xde\xb4\xbd\x9f\xdb\x3e\xe1\xa9\x4c\x6f\x54\xed\x79\x7f\x95\xea\x4b\xf4\xfe\x8e\xbf\x81\xef\xc3\x25\x66\x42\x02\x55\xba\xe0\xb9\x78\xc6\x14\xa2\x12\x35\xb7\x4a\x9b\xdd\xf2\x5e\x46\x26\x41\x79\xa2\x1b\x7d\x44\x6d\x84\x92\xc7\x26\xa7\x5a\x02\x78\x3f\x8b\xe8\xa9\x67\xa1\xe6\x64\xb9\xca\xf6\x63\x6d\x8e\x6f\x23\x6d\xde\xfe\x95\xb7\xd4\xf8\x28\x54\x65\x5c\xcb\xad\x75\x92\x7b\x2e\x33\x64\x29\xb7\x7c\x27\x74\xeb\xa8\x87\xdc\xdc\x9e\x03\xfe\x63\x4c\x3d\x0b\x9b\xc2\x3a\x8e\xb5\x78\x41\xc3\x4f\x0b\xb2\xee\xe4\xf5\x39\xeb\x4c\xf7\x99\x4d\x22\xd3\x23\x27\xf3\x80\xd1\x9f\xa0\x3c\xaa\x85\xef\x77\xa5\xc0\x65\x0a\x69\x55\xe6\x22\xe1\x16\xa1\xbe\x88\xa5\x56\xc5\x7a\x18\x3d\xb0\xca\x89\x34\xf2\xd4\x57\xa5\x15\x85\x93\x2d\x95\x86\x25\x37\x16\x34\x9a\x52\x49\x83\xbe\x15\x05\x82\x55\x90\xa8\xa2\xac\x6c\xfd\xa8\x51\xa6\xa8\xcf\x9d\x9a\x2a\x0b\x95\x11\x32\x73\x4a\x14\x99\x84\x1f\xf8\x64\xdc\xa1\x0e\x45\xdb\x13\x2c\xbf\xcb\xd1\x78\x4e\x78\x87\x09\xaf\x0c\x82\xbd\x47\xf8\x79\xaf\x72\x84\x52\x09\x69\x41\xd4\xe2\x87\x0a\xf5\x13\x08\x99\x62\xe9\x7a\x49\x9b\x3f\x9d\x1f\xb8\xff\x8d\x49\x56\x72\xcd\x0b\xb4\xa8\xff\xd1\x7a\xb4\xac\x5b\x6b\xd4\x79\x4e\xa2\x85\xf3\x78\x13\x93\x71\x38\x0b\xbb\xfb\x01\xbe\x0f\xf3\x68\x12\xfd\xbf\x52\xbf\x6d\x4c\xcb\xb2\x72\x9f\x05\xb3\xfa\xef\xd7\x6f\xaf\x17\x4e\xc9\xa5\xc8\x2a\x5d\xff\xd8\xf5\x57\xae\xf3\xc5\x08\xe9\x84\x7c\x01\x91\xfe\x62\x1b\xe9\x30\xd6\xa2\xb7\x4f\x2b\x4c\xc6\x3a\x48\x8c\x39\xfb\x75\xc7\x88\x6e\x46\xdc\x6c\xdb\x2c\xa4\xd7\x70\x67\x35\xe2\xd6\x95\xf3\xba\x39\x79\x75\x26\x07\xec\xe0\xb1\x2b\xf2\x3b\x00\x00\xff\xff\x5d\x8a\xce\x13\x1a\x09\x00\x00")

func _1497233022_initial_schemaUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1497233022_initial_schemaUpSql,
		"1497233022_initial_schema.up.sql",
	)
}

func _1497233022_initial_schemaUpSql() (*asset, error) {
	bytes, err := _1497233022_initial_schemaUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1497233022_initial_schema.up.sql", size: 2330, mode: os.FileMode(420), modTime: time.Unix(1498788502, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1497233022_initial_schema.down.sql": _1497233022_initial_schemaDownSql,
	"1497233022_initial_schema.up.sql":   _1497233022_initial_schemaUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"1497233022_initial_schema.down.sql": &bintree{_1497233022_initial_schemaDownSql, map[string]*bintree{}},
	"1497233022_initial_schema.up.sql":   &bintree{_1497233022_initial_schemaUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
