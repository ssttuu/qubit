// Code generated by go-bindata.
// sources:
// sql/1497233022_initial_schema.down.sql
// sql/1497233022_initial_schema.up.sql
// DO NOT EDIT!

package migrate

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1497233022_initial_schemaDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xc8\x2f\x48\x2d\x4a\x2c\xc9\x2f\x2a\xb6\xe6\xe2\x42\x12\xce\xcc\x4d\x4c\x4f\xc5\x26\x16\x5f\x9c\x5a\x58\x9a\x9a\x97\x8c\x2e\x59\x9c\x9c\x9a\x87\x2e\x56\x50\x94\x9f\x95\x9a\x5c\x82\x26\x9a\x5f\x94\x9e\x98\x97\x59\x95\x58\x92\x99\x9f\x57\x6c\xcd\x05\x08\x00\x00\xff\xff\x5e\xac\x9d\x72\x8c\x00\x00\x00")

func _1497233022_initial_schemaDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1497233022_initial_schemaDownSql,
		"1497233022_initial_schema.down.sql",
	)
}

func _1497233022_initial_schemaDownSql() (*asset, error) {
	bytes, err := _1497233022_initial_schemaDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1497233022_initial_schema.down.sql", size: 140, mode: os.FileMode(420), modTime: time.Unix(1497400016, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1497233022_initial_schemaUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x93\x41\x4b\xc3\x30\x18\x86\xef\xfd\x15\x1f\x3b\xb5\xe0\x61\x1e\x3c\x79\xca\x4a\x36\xab\x35\x95\xac\x0a\x43\x64\x84\xee\x63\x44\x68\x12\x93\x0c\xd4\x5f\x2f\x6e\xeb\xb6\xb4\x95\xf5\xb0\x8b\xe7\x37\xbc\xdf\xf3\xbc\xb4\x29\xa7\xa4\xa4\x50\x92\x49\x4e\x41\xdb\xb5\x50\xf2\x5b\x78\xa9\x95\x83\x38\x02\x00\x90\x2b\x98\x64\xb3\x8c\x95\xf0\xc4\xb3\x47\xc2\x17\xf0\x40\x17\x57\xdb\x68\xa4\x44\x8d\x23\x78\x21\x3c\xbd\x23\x3c\xbe\x1e\x8f\x13\x60\x45\x09\xec\x39\xcf\xa3\xe4\x36\x8a\x82\x72\x63\xf5\x3b\x56\x7e\x40\xef\x29\xc6\xf2\xf8\xae\xa9\x3e\x7f\x7c\xf7\x62\x5a\x70\x9a\xcd\xd8\x6f\x2f\xc4\xad\xce\x04\x38\x9d\x52\x4e\x59\x4a\xe7\xa1\x76\x2c\x57\x49\x17\xde\x55\xa8\x70\x00\xfa\x5e\xf2\x52\xd4\xc7\xba\x00\xb8\x99\xb2\x9f\x55\xd6\x62\x8d\x4b\x87\x1f\x1b\x54\xd5\xbf\x82\x1e\xc0\x1a\xca\x5d\x0a\xb9\xd3\x1a\x90\xb7\x06\xed\x17\xd0\x06\xad\xf0\xda\x0e\x70\xd8\x7e\x4c\x7f\xa2\x57\x5a\x79\xfc\xf4\x27\xec\x6d\x74\xff\x65\xf0\x10\xdf\x74\xe2\xf3\xee\x52\x99\x8d\x77\xfb\xf3\xaf\x6f\xad\xd4\x08\x2b\x6a\xf4\x68\x1d\xdc\xcf\x0b\xd6\x33\x57\x23\x10\xac\xb4\xfb\x45\x0e\xe3\xfc\x04\x00\x00\xff\xff\x57\xdb\x4c\xc5\x59\x04\x00\x00")

func _1497233022_initial_schemaUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1497233022_initial_schemaUpSql,
		"1497233022_initial_schema.up.sql",
	)
}

func _1497233022_initial_schemaUpSql() (*asset, error) {
	bytes, err := _1497233022_initial_schemaUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1497233022_initial_schema.up.sql", size: 1113, mode: os.FileMode(420), modTime: time.Unix(1497407545, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1497233022_initial_schema.down.sql": _1497233022_initial_schemaDownSql,
	"1497233022_initial_schema.up.sql":   _1497233022_initial_schemaUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"1497233022_initial_schema.down.sql": &bintree{_1497233022_initial_schemaDownSql, map[string]*bintree{}},
	"1497233022_initial_schema.up.sql":   &bintree{_1497233022_initial_schemaUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
