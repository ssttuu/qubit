// Code generated by go-bindata.
// sources:
// sql/1498272535_initial_schema.down.sql
// sql/1498272535_initial_schema.up.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1498272535_initial_schemaDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\xf0\xf4\x73\x71\x8d\x50\x48\xce\xcf\x2d\x28\x2d\x49\x2c\xc9\xcc\xcf\x8b\x2f\x2e\x49\x2c\x29\x2d\x4e\x2d\x8e\xcf\xcc\x4b\xc9\x4c\x4e\x2d\xb6\xe6\xe2\x02\xab\x0c\x71\x74\xf2\x71\xc5\xaa\x12\xa7\x8a\x62\x6b\x2e\x40\x00\x00\x00\xff\xff\x01\xea\xcd\x88\x65\x00\x00\x00")

func _1498272535_initial_schemaDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1498272535_initial_schemaDownSql,
		"1498272535_initial_schema.down.sql",
	)
}

func _1498272535_initial_schemaDownSql() (*asset, error) {
	bytes, err := _1498272535_initial_schemaDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1498272535_initial_schema.down.sql", size: 101, mode: os.FileMode(420), modTime: time.Unix(1498438743, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1498272535_initial_schemaUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x4d\x6b\x02\x31\x10\x86\xef\xfb\x2b\xe6\xb8\x0b\x9e\x04\x4f\x9e\xe2\x3a\xda\xb4\xd9\xac\x24\xb1\xd4\xd3\xb0\x9a\x50\x42\xd1\x48\x36\x0b\xf6\xdf\x17\x3f\xa0\xba\x6e\xa1\xe7\x79\x32\xef\xfb\x4c\x4a\x85\xcc\x20\x18\x36\x13\x08\xbb\xb0\x3f\x76\xa9\x49\x3e\x1c\x5a\xc8\x33\x00\x00\x6f\x61\xc6\x97\x1a\x15\x67\x02\x56\x8a\x57\x4c\x6d\xe0\x0d\x37\xa3\xcb\x34\x1c\x5d\x6c\x52\x88\xf4\xe5\xbe\xe1\x9d\xa9\xf2\x85\xa9\x7c\x3c\x99\x14\x20\x6b\x03\x72\x2d\xc4\x95\x4b\x7e\xef\x60\x5e\xaf\xcf\x21\x2b\x85\x25\xd7\xbc\x96\x3d\x66\x1b\xba\x83\xf5\x87\x4f\xda\x86\x13\x8d\x2d\xbc\xea\x27\x24\xba\x36\x74\x71\xe7\xc8\xdb\xe1\xb4\xac\x98\x66\xd9\x5f\x4a\xd4\xa6\x26\x75\xad\xfb\x9f\xda\xfd\xc3\x2b\xc9\xa5\xe9\xf5\xb9\x2e\x04\x5d\x31\x21\x9e\xa7\xbb\xe8\x9a\xe4\x2c\x35\x09\x0c\xaf\x50\x1b\x56\xad\x7a\xc8\xa2\x56\xc8\x97\xf2\x9c\x0a\xf9\x63\x62\x01\x0a\x17\xa8\x50\x96\xa8\x1f\x3e\x26\xf7\xb6\xb8\xf7\xe4\x72\x8e\x1f\xe0\xed\x89\x86\x5c\x89\x1e\xd7\x12\xfd\xd6\xa2\x1b\x75\xa9\x52\xcb\xc1\x5b\x5d\x66\x6b\xcd\xe5\x12\xb6\x29\x3a\xd7\xaf\x39\xba\xd3\x1c\xdd\x0e\x52\x4c\xb3\x9f\x00\x00\x00\xff\xff\x4a\xa3\x39\x33\x57\x02\x00\x00")

func _1498272535_initial_schemaUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1498272535_initial_schemaUpSql,
		"1498272535_initial_schema.up.sql",
	)
}

func _1498272535_initial_schemaUpSql() (*asset, error) {
	bytes, err := _1498272535_initial_schemaUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1498272535_initial_schema.up.sql", size: 599, mode: os.FileMode(420), modTime: time.Unix(1498611030, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1498272535_initial_schema.down.sql": _1498272535_initial_schemaDownSql,
	"1498272535_initial_schema.up.sql":   _1498272535_initial_schemaUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"1498272535_initial_schema.down.sql": &bintree{_1498272535_initial_schemaDownSql, map[string]*bintree{}},
	"1498272535_initial_schema.up.sql":   &bintree{_1498272535_initial_schemaUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
