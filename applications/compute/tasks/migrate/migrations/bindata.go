// Code generated by go-bindata.
// sources:
// sql/1498272535_initial_schema.down.sql
// sql/1498272535_initial_schema.up.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1498272535_initial_schemaDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\xf0\xf4\x73\x71\x8d\x50\x48\xce\xcf\x2d\x28\x2d\x49\x2c\xc9\xcc\xcf\x8b\x2f\x2e\x49\x2c\x29\x2d\x4e\x2d\x8e\xcf\xcc\x4b\xc9\x4c\x4e\x2d\xb6\xe6\xe2\x02\xab\x0c\x71\x74\xf2\x71\xc5\xaa\x12\xa7\x8a\x62\x6b\x2e\x40\x00\x00\x00\xff\xff\x01\xea\xcd\x88\x65\x00\x00\x00")

func _1498272535_initial_schemaDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1498272535_initial_schemaDownSql,
		"1498272535_initial_schema.down.sql",
	)
}

func _1498272535_initial_schemaDownSql() (*asset, error) {
	bytes, err := _1498272535_initial_schemaDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1498272535_initial_schema.down.sql", size: 101, mode: os.FileMode(436), modTime: time.Unix(1498431713, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1498272535_initial_schemaUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xbf\x6e\xc2\x30\x10\xc6\xf7\x3c\xc5\x8d\xb1\xc4\x54\x89\x89\xc9\xa4\x47\xea\xd6\x71\x90\x6d\xaa\x32\x59\x6e\xe2\xc1\x03\x38\xb2\x9d\xf7\xaf\xd2\x20\x04\x29\x48\x9d\xbf\xdf\xdd\xf7\xa7\x92\x48\x35\x82\xa6\x5b\x8e\xd0\x85\xd3\x30\x66\x9b\x7d\x38\x27\x28\x0b\x00\x00\xdf\xc3\x96\xd5\x0a\x25\xa3\x1c\xf6\x92\x35\x54\x1e\xe1\x03\x8f\xab\x5f\x35\x86\x90\x4d\x18\x5c\xb4\x39\x44\x33\xb3\x4c\x68\x10\xad\x06\x71\xe0\x7c\xa6\xae\xc0\xc9\x0e\xf0\xae\x5a\xb1\xd0\xa3\x4b\x61\x8c\x9d\x9b\x1e\x7c\x52\x59\xbd\x51\x59\xbe\xac\xd7\xe4\x8a\x15\x64\x53\x14\xcf\x92\x9a\x94\x6d\x1e\x93\xfb\x5f\xe2\xdb\xc3\x67\x79\xe7\x87\xa0\x1a\xca\xf9\x5f\xb5\x8b\xce\x66\xd7\x1b\x9b\x41\xb3\x06\x95\xa6\xcd\x7e\x81\xec\x5a\x89\xac\x16\x93\x2b\x94\xf7\x8e\x04\x24\xee\x50\xa2\xa8\x50\xdd\xed\x5d\xfa\x9e\x4c\x3d\x2f\x35\x99\x78\xc5\xaf\x87\x35\x8d\x3f\xf7\xbe\x73\x09\x5a\xf1\x78\x86\x83\x62\xa2\x86\xef\x1c\x9d\x5b\xba\xaf\x6e\xd2\xaf\x2e\x3d\xc9\xa6\xf8\x09\x00\x00\xff\xff\x8f\xaa\x86\x91\x05\x02\x00\x00")

func _1498272535_initial_schemaUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1498272535_initial_schemaUpSql,
		"1498272535_initial_schema.up.sql",
	)
}

func _1498272535_initial_schemaUpSql() (*asset, error) {
	bytes, err := _1498272535_initial_schemaUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1498272535_initial_schema.up.sql", size: 517, mode: os.FileMode(436), modTime: time.Unix(1498431551, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1498272535_initial_schema.down.sql": _1498272535_initial_schemaDownSql,
	"1498272535_initial_schema.up.sql":   _1498272535_initial_schemaUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"1498272535_initial_schema.down.sql": &bintree{_1498272535_initial_schemaDownSql, map[string]*bintree{}},
	"1498272535_initial_schema.up.sql":   &bintree{_1498272535_initial_schemaUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
