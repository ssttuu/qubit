/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var geometry_geometry_pb = require('../geometry/geometry_pb.js');
var images_images_pb = require('../images/images_pb.js');
var operators_operators_pb = require('../operators/operators_pb.js');
var parameters_parameters_pb = require('../parameters/parameters_pb.js');
goog.exportSymbol('proto.compute.RenderImageRequest', null, global);
goog.exportSymbol('proto.compute.RenderImageResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.compute.RenderImageRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.compute.RenderImageRequest.repeatedFields_, null);
};
goog.inherits(proto.compute.RenderImageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.compute.RenderImageRequest.displayName = 'proto.compute.RenderImageRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.compute.RenderImageRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.compute.RenderImageRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.compute.RenderImageRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.compute.RenderImageRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.compute.RenderImageRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    operator: (f = msg.getOperator()) && operators_operators_pb.Operator.toObject(includeInstance, f),
    parametersList: jspb.Message.toObjectList(msg.getParametersList(),
    parameters_parameters_pb.Parameter.toObject, includeInstance),
    boundingBox: (f = msg.getBoundingBox()) && geometry_geometry_pb.BoundingBox2D.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.compute.RenderImageRequest}
 */
proto.compute.RenderImageRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.compute.RenderImageRequest;
  return proto.compute.RenderImageRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.compute.RenderImageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.compute.RenderImageRequest}
 */
proto.compute.RenderImageRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new operators_operators_pb.Operator;
      reader.readMessage(value,operators_operators_pb.Operator.deserializeBinaryFromReader);
      msg.setOperator(value);
      break;
    case 2:
      var value = new parameters_parameters_pb.Parameter;
      reader.readMessage(value,parameters_parameters_pb.Parameter.deserializeBinaryFromReader);
      msg.addParameters(value);
      break;
    case 3:
      var value = new geometry_geometry_pb.BoundingBox2D;
      reader.readMessage(value,geometry_geometry_pb.BoundingBox2D.deserializeBinaryFromReader);
      msg.setBoundingBox(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.compute.RenderImageRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.compute.RenderImageRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.compute.RenderImageRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.compute.RenderImageRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getOperator();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      operators_operators_pb.Operator.serializeBinaryToWriter
    );
  }
  f = this.getParametersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      parameters_parameters_pb.Parameter.serializeBinaryToWriter
    );
  }
  f = this.getBoundingBox();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      geometry_geometry_pb.BoundingBox2D.serializeBinaryToWriter
    );
  }
};


/**
 * optional operators.Operator operator = 1;
 * @return {?proto.operators.Operator}
 */
proto.compute.RenderImageRequest.prototype.getOperator = function() {
  return /** @type{?proto.operators.Operator} */ (
    jspb.Message.getWrapperField(this, operators_operators_pb.Operator, 1));
};


/** @param {?proto.operators.Operator|undefined} value */
proto.compute.RenderImageRequest.prototype.setOperator = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.compute.RenderImageRequest.prototype.clearOperator = function() {
  this.setOperator(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.compute.RenderImageRequest.prototype.hasOperator = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated parameters.Parameter parameters = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.parameters.Parameter>}
 */
proto.compute.RenderImageRequest.prototype.getParametersList = function() {
  return /** @type{!Array.<!proto.parameters.Parameter>} */ (
    jspb.Message.getRepeatedWrapperField(this, parameters_parameters_pb.Parameter, 2));
};


/** @param {!Array.<!proto.parameters.Parameter>} value */
proto.compute.RenderImageRequest.prototype.setParametersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.parameters.Parameter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.parameters.Parameter}
 */
proto.compute.RenderImageRequest.prototype.addParameters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.parameters.Parameter, opt_index);
};


proto.compute.RenderImageRequest.prototype.clearParametersList = function() {
  this.setParametersList([]);
};


/**
 * optional geometry.BoundingBox2D bounding_box = 3;
 * @return {?proto.geometry.BoundingBox2D}
 */
proto.compute.RenderImageRequest.prototype.getBoundingBox = function() {
  return /** @type{?proto.geometry.BoundingBox2D} */ (
    jspb.Message.getWrapperField(this, geometry_geometry_pb.BoundingBox2D, 3));
};


/** @param {?proto.geometry.BoundingBox2D|undefined} value */
proto.compute.RenderImageRequest.prototype.setBoundingBox = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.compute.RenderImageRequest.prototype.clearBoundingBox = function() {
  this.setBoundingBox(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.compute.RenderImageRequest.prototype.hasBoundingBox = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.compute.RenderImageResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.compute.RenderImageResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.compute.RenderImageResponse.displayName = 'proto.compute.RenderImageResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.compute.RenderImageResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.compute.RenderImageResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.compute.RenderImageResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.compute.RenderImageResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    imagePlane: (f = msg.getImagePlane()) && images_images_pb.Plane.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.compute.RenderImageResponse}
 */
proto.compute.RenderImageResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.compute.RenderImageResponse;
  return proto.compute.RenderImageResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.compute.RenderImageResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.compute.RenderImageResponse}
 */
proto.compute.RenderImageResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new images_images_pb.Plane;
      reader.readMessage(value,images_images_pb.Plane.deserializeBinaryFromReader);
      msg.setImagePlane(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.compute.RenderImageResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.compute.RenderImageResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.compute.RenderImageResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.compute.RenderImageResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getImagePlane();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      images_images_pb.Plane.serializeBinaryToWriter
    );
  }
};


/**
 * optional images.Plane image_plane = 1;
 * @return {?proto.images.Plane}
 */
proto.compute.RenderImageResponse.prototype.getImagePlane = function() {
  return /** @type{?proto.images.Plane} */ (
    jspb.Message.getWrapperField(this, images_images_pb.Plane, 1));
};


/** @param {?proto.images.Plane|undefined} value */
proto.compute.RenderImageResponse.prototype.setImagePlane = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.compute.RenderImageResponse.prototype.clearImagePlane = function() {
  this.setImagePlane(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.compute.RenderImageResponse.prototype.hasImagePlane = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.compute);
