/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_api_annotations_pb = require('../google/api/annotations_pb.js');
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.exportSymbol('proto.operators.ConnectOperatorRequest', null, global);
goog.exportSymbol('proto.operators.Connection', null, global);
goog.exportSymbol('proto.operators.CreateOperatorRequest', null, global);
goog.exportSymbol('proto.operators.DeleteOperatorRequest', null, global);
goog.exportSymbol('proto.operators.DisconnectOperatorRequest', null, global);
goog.exportSymbol('proto.operators.ExpressionValue', null, global);
goog.exportSymbol('proto.operators.GetOperatorRequest', null, global);
goog.exportSymbol('proto.operators.KeyFrameValue', null, global);
goog.exportSymbol('proto.operators.ListOperatorsRequest', null, global);
goog.exportSymbol('proto.operators.ListOperatorsResponse', null, global);
goog.exportSymbol('proto.operators.Operator', null, global);
goog.exportSymbol('proto.operators.RenameOperatorRequest', null, global);
goog.exportSymbol('proto.operators.SetExpressionRequest', null, global);
goog.exportSymbol('proto.operators.SetKeyFrameRequest', null, global);
goog.exportSymbol('proto.operators.SetValueRequest', null, global);
goog.exportSymbol('proto.operators.Value', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.operators.Operator = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.operators.Operator, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.operators.Operator.displayName = 'proto.operators.Operator';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.operators.Operator.prototype.toObject = function(opt_includeInstance) {
  return proto.operators.Operator.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.operators.Operator} msg The msg instance to transform.
 * @return {!Object}
 */
proto.operators.Operator.toObject = function(includeInstance, msg) {
  var f, obj = {
    sceneId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, ""),
    version: jspb.Message.getFieldWithDefault(msg, 3, 0),
    name: jspb.Message.getFieldWithDefault(msg, 4, ""),
    operatorData: msg.getOperatorData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.operators.Operator}
 */
proto.operators.Operator.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.operators.Operator;
  return proto.operators.Operator.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.operators.Operator} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.operators.Operator}
 */
proto.operators.Operator.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSceneId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersion(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOperatorData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.operators.Operator} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.operators.Operator.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.operators.Operator.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.operators.Operator.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSceneId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getVersion();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getOperatorData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional string scene_id = 1;
 * @return {string}
 */
proto.operators.Operator.prototype.getSceneId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.operators.Operator.prototype.setSceneId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string id = 2;
 * @return {string}
 */
proto.operators.Operator.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.operators.Operator.prototype.setId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 version = 3;
 * @return {number}
 */
proto.operators.Operator.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.operators.Operator.prototype.setVersion = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.operators.Operator.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.operators.Operator.prototype.setName = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional bytes operator_data = 5;
 * @return {!(string|Uint8Array)}
 */
proto.operators.Operator.prototype.getOperatorData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes operator_data = 5;
 * This is a type-conversion wrapper around `getOperatorData()`
 * @return {string}
 */
proto.operators.Operator.prototype.getOperatorData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOperatorData()));
};


/**
 * optional bytes operator_data = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOperatorData()`
 * @return {!Uint8Array}
 */
proto.operators.Operator.prototype.getOperatorData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOperatorData()));
};


/** @param {!(string|Uint8Array)} value */
proto.operators.Operator.prototype.setOperatorData = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.operators.Connection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.operators.Connection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.operators.Connection.displayName = 'proto.operators.Connection';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.operators.Connection.prototype.toObject = function(opt_includeInstance) {
  return proto.operators.Connection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.operators.Connection} msg The msg instance to transform.
 * @return {!Object}
 */
proto.operators.Connection.toObject = function(includeInstance, msg) {
  var f, obj = {
    sceneId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, ""),
    inputId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    inputIndex: jspb.Message.getFieldWithDefault(msg, 4, 0),
    outputId: jspb.Message.getFieldWithDefault(msg, 5, ""),
    outputIndex: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.operators.Connection}
 */
proto.operators.Connection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.operators.Connection;
  return proto.operators.Connection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.operators.Connection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.operators.Connection}
 */
proto.operators.Connection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSceneId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setInputId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInputIndex(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutputId(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOutputIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.operators.Connection} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.operators.Connection.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.operators.Connection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.operators.Connection.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSceneId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getInputId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getInputIndex();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = this.getOutputId();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getOutputIndex();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * optional string scene_id = 1;
 * @return {string}
 */
proto.operators.Connection.prototype.getSceneId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.operators.Connection.prototype.setSceneId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string id = 2;
 * @return {string}
 */
proto.operators.Connection.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.operators.Connection.prototype.setId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string input_id = 3;
 * @return {string}
 */
proto.operators.Connection.prototype.getInputId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.operators.Connection.prototype.setInputId = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 input_index = 4;
 * @return {number}
 */
proto.operators.Connection.prototype.getInputIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.operators.Connection.prototype.setInputIndex = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string output_id = 5;
 * @return {string}
 */
proto.operators.Connection.prototype.getOutputId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.operators.Connection.prototype.setOutputId = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int32 output_index = 6;
 * @return {number}
 */
proto.operators.Connection.prototype.getOutputIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.operators.Connection.prototype.setOutputIndex = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.operators.ListOperatorsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.operators.ListOperatorsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.operators.ListOperatorsRequest.displayName = 'proto.operators.ListOperatorsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.operators.ListOperatorsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.operators.ListOperatorsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.operators.ListOperatorsRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.operators.ListOperatorsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sceneId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pageSize: jspb.Message.getFieldWithDefault(msg, 2, 0),
    pageToken: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.operators.ListOperatorsRequest}
 */
proto.operators.ListOperatorsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.operators.ListOperatorsRequest;
  return proto.operators.ListOperatorsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.operators.ListOperatorsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.operators.ListOperatorsRequest}
 */
proto.operators.ListOperatorsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSceneId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPageSize(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPageToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.operators.ListOperatorsRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.operators.ListOperatorsRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.operators.ListOperatorsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.operators.ListOperatorsRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSceneId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getPageSize();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = this.getPageToken();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string scene_id = 1;
 * @return {string}
 */
proto.operators.ListOperatorsRequest.prototype.getSceneId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.operators.ListOperatorsRequest.prototype.setSceneId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 page_size = 2;
 * @return {number}
 */
proto.operators.ListOperatorsRequest.prototype.getPageSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.operators.ListOperatorsRequest.prototype.setPageSize = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string page_token = 3;
 * @return {string}
 */
proto.operators.ListOperatorsRequest.prototype.getPageToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.operators.ListOperatorsRequest.prototype.setPageToken = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.operators.ListOperatorsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.operators.ListOperatorsResponse.repeatedFields_, null);
};
goog.inherits(proto.operators.ListOperatorsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.operators.ListOperatorsResponse.displayName = 'proto.operators.ListOperatorsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.operators.ListOperatorsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.operators.ListOperatorsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.operators.ListOperatorsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.operators.ListOperatorsResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.operators.ListOperatorsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    operatorsList: jspb.Message.toObjectList(msg.getOperatorsList(),
    proto.operators.Operator.toObject, includeInstance),
    nextPageToken: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.operators.ListOperatorsResponse}
 */
proto.operators.ListOperatorsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.operators.ListOperatorsResponse;
  return proto.operators.ListOperatorsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.operators.ListOperatorsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.operators.ListOperatorsResponse}
 */
proto.operators.ListOperatorsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.operators.Operator;
      reader.readMessage(value,proto.operators.Operator.deserializeBinaryFromReader);
      msg.addOperators(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextPageToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.operators.ListOperatorsResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.operators.ListOperatorsResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.operators.ListOperatorsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.operators.ListOperatorsResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getOperatorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.operators.Operator.serializeBinaryToWriter
    );
  }
  f = this.getNextPageToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * repeated Operator operators = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.operators.Operator>}
 */
proto.operators.ListOperatorsResponse.prototype.getOperatorsList = function() {
  return /** @type{!Array.<!proto.operators.Operator>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.operators.Operator, 1));
};


/** @param {!Array.<!proto.operators.Operator>} value */
proto.operators.ListOperatorsResponse.prototype.setOperatorsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.operators.Operator=} opt_value
 * @param {number=} opt_index
 * @return {!proto.operators.Operator}
 */
proto.operators.ListOperatorsResponse.prototype.addOperators = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.operators.Operator, opt_index);
};


proto.operators.ListOperatorsResponse.prototype.clearOperatorsList = function() {
  this.setOperatorsList([]);
};


/**
 * optional string next_page_token = 2;
 * @return {string}
 */
proto.operators.ListOperatorsResponse.prototype.getNextPageToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.operators.ListOperatorsResponse.prototype.setNextPageToken = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.operators.GetOperatorRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.operators.GetOperatorRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.operators.GetOperatorRequest.displayName = 'proto.operators.GetOperatorRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.operators.GetOperatorRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.operators.GetOperatorRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.operators.GetOperatorRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.operators.GetOperatorRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sceneId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.operators.GetOperatorRequest}
 */
proto.operators.GetOperatorRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.operators.GetOperatorRequest;
  return proto.operators.GetOperatorRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.operators.GetOperatorRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.operators.GetOperatorRequest}
 */
proto.operators.GetOperatorRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSceneId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.operators.GetOperatorRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.operators.GetOperatorRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.operators.GetOperatorRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.operators.GetOperatorRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSceneId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string scene_id = 1;
 * @return {string}
 */
proto.operators.GetOperatorRequest.prototype.getSceneId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.operators.GetOperatorRequest.prototype.setSceneId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string id = 2;
 * @return {string}
 */
proto.operators.GetOperatorRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.operators.GetOperatorRequest.prototype.setId = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.operators.CreateOperatorRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.operators.CreateOperatorRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.operators.CreateOperatorRequest.displayName = 'proto.operators.CreateOperatorRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.operators.CreateOperatorRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.operators.CreateOperatorRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.operators.CreateOperatorRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.operators.CreateOperatorRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sceneId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    operator: (f = msg.getOperator()) && proto.operators.Operator.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.operators.CreateOperatorRequest}
 */
proto.operators.CreateOperatorRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.operators.CreateOperatorRequest;
  return proto.operators.CreateOperatorRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.operators.CreateOperatorRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.operators.CreateOperatorRequest}
 */
proto.operators.CreateOperatorRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSceneId(value);
      break;
    case 2:
      var value = new proto.operators.Operator;
      reader.readMessage(value,proto.operators.Operator.deserializeBinaryFromReader);
      msg.setOperator(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.operators.CreateOperatorRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.operators.CreateOperatorRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.operators.CreateOperatorRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.operators.CreateOperatorRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSceneId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getOperator();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.operators.Operator.serializeBinaryToWriter
    );
  }
};


/**
 * optional string scene_id = 1;
 * @return {string}
 */
proto.operators.CreateOperatorRequest.prototype.getSceneId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.operators.CreateOperatorRequest.prototype.setSceneId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Operator operator = 2;
 * @return {?proto.operators.Operator}
 */
proto.operators.CreateOperatorRequest.prototype.getOperator = function() {
  return /** @type{?proto.operators.Operator} */ (
    jspb.Message.getWrapperField(this, proto.operators.Operator, 2));
};


/** @param {?proto.operators.Operator|undefined} value */
proto.operators.CreateOperatorRequest.prototype.setOperator = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.operators.CreateOperatorRequest.prototype.clearOperator = function() {
  this.setOperator(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.operators.CreateOperatorRequest.prototype.hasOperator = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.operators.DeleteOperatorRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.operators.DeleteOperatorRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.operators.DeleteOperatorRequest.displayName = 'proto.operators.DeleteOperatorRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.operators.DeleteOperatorRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.operators.DeleteOperatorRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.operators.DeleteOperatorRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.operators.DeleteOperatorRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sceneId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.operators.DeleteOperatorRequest}
 */
proto.operators.DeleteOperatorRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.operators.DeleteOperatorRequest;
  return proto.operators.DeleteOperatorRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.operators.DeleteOperatorRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.operators.DeleteOperatorRequest}
 */
proto.operators.DeleteOperatorRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSceneId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.operators.DeleteOperatorRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.operators.DeleteOperatorRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.operators.DeleteOperatorRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.operators.DeleteOperatorRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSceneId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string scene_id = 1;
 * @return {string}
 */
proto.operators.DeleteOperatorRequest.prototype.getSceneId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.operators.DeleteOperatorRequest.prototype.setSceneId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string id = 2;
 * @return {string}
 */
proto.operators.DeleteOperatorRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.operators.DeleteOperatorRequest.prototype.setId = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.operators.RenameOperatorRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.operators.RenameOperatorRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.operators.RenameOperatorRequest.displayName = 'proto.operators.RenameOperatorRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.operators.RenameOperatorRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.operators.RenameOperatorRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.operators.RenameOperatorRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.operators.RenameOperatorRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sceneId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.operators.RenameOperatorRequest}
 */
proto.operators.RenameOperatorRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.operators.RenameOperatorRequest;
  return proto.operators.RenameOperatorRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.operators.RenameOperatorRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.operators.RenameOperatorRequest}
 */
proto.operators.RenameOperatorRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSceneId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.operators.RenameOperatorRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.operators.RenameOperatorRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.operators.RenameOperatorRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.operators.RenameOperatorRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSceneId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string scene_id = 1;
 * @return {string}
 */
proto.operators.RenameOperatorRequest.prototype.getSceneId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.operators.RenameOperatorRequest.prototype.setSceneId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string id = 2;
 * @return {string}
 */
proto.operators.RenameOperatorRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.operators.RenameOperatorRequest.prototype.setId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.operators.RenameOperatorRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.operators.RenameOperatorRequest.prototype.setName = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.operators.ConnectOperatorRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.operators.ConnectOperatorRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.operators.ConnectOperatorRequest.displayName = 'proto.operators.ConnectOperatorRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.operators.ConnectOperatorRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.operators.ConnectOperatorRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.operators.ConnectOperatorRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.operators.ConnectOperatorRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sceneId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    connection: (f = msg.getConnection()) && proto.operators.Connection.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.operators.ConnectOperatorRequest}
 */
proto.operators.ConnectOperatorRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.operators.ConnectOperatorRequest;
  return proto.operators.ConnectOperatorRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.operators.ConnectOperatorRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.operators.ConnectOperatorRequest}
 */
proto.operators.ConnectOperatorRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSceneId(value);
      break;
    case 2:
      var value = new proto.operators.Connection;
      reader.readMessage(value,proto.operators.Connection.deserializeBinaryFromReader);
      msg.setConnection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.operators.ConnectOperatorRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.operators.ConnectOperatorRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.operators.ConnectOperatorRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.operators.ConnectOperatorRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSceneId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getConnection();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.operators.Connection.serializeBinaryToWriter
    );
  }
};


/**
 * optional string scene_id = 1;
 * @return {string}
 */
proto.operators.ConnectOperatorRequest.prototype.getSceneId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.operators.ConnectOperatorRequest.prototype.setSceneId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Connection connection = 2;
 * @return {?proto.operators.Connection}
 */
proto.operators.ConnectOperatorRequest.prototype.getConnection = function() {
  return /** @type{?proto.operators.Connection} */ (
    jspb.Message.getWrapperField(this, proto.operators.Connection, 2));
};


/** @param {?proto.operators.Connection|undefined} value */
proto.operators.ConnectOperatorRequest.prototype.setConnection = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.operators.ConnectOperatorRequest.prototype.clearConnection = function() {
  this.setConnection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.operators.ConnectOperatorRequest.prototype.hasConnection = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.operators.DisconnectOperatorRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.operators.DisconnectOperatorRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.operators.DisconnectOperatorRequest.displayName = 'proto.operators.DisconnectOperatorRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.operators.DisconnectOperatorRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.operators.DisconnectOperatorRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.operators.DisconnectOperatorRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.operators.DisconnectOperatorRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sceneId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    connectionId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.operators.DisconnectOperatorRequest}
 */
proto.operators.DisconnectOperatorRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.operators.DisconnectOperatorRequest;
  return proto.operators.DisconnectOperatorRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.operators.DisconnectOperatorRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.operators.DisconnectOperatorRequest}
 */
proto.operators.DisconnectOperatorRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSceneId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setConnectionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.operators.DisconnectOperatorRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.operators.DisconnectOperatorRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.operators.DisconnectOperatorRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.operators.DisconnectOperatorRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSceneId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getConnectionId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string scene_id = 1;
 * @return {string}
 */
proto.operators.DisconnectOperatorRequest.prototype.getSceneId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.operators.DisconnectOperatorRequest.prototype.setSceneId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string connection_id = 2;
 * @return {string}
 */
proto.operators.DisconnectOperatorRequest.prototype.getConnectionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.operators.DisconnectOperatorRequest.prototype.setConnectionId = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.operators.Value = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.operators.Value, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.operators.Value.displayName = 'proto.operators.Value';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.operators.Value.prototype.toObject = function(opt_includeInstance) {
  return proto.operators.Value.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.operators.Value} msg The msg instance to transform.
 * @return {!Object}
 */
proto.operators.Value.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.operators.Value}
 */
proto.operators.Value.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.operators.Value;
  return proto.operators.Value.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.operators.Value} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.operators.Value}
 */
proto.operators.Value.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.operators.Value} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.operators.Value.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.operators.Value.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.operators.Value.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.operators.KeyFrameValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.operators.KeyFrameValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.operators.KeyFrameValue.displayName = 'proto.operators.KeyFrameValue';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.operators.KeyFrameValue.prototype.toObject = function(opt_includeInstance) {
  return proto.operators.KeyFrameValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.operators.KeyFrameValue} msg The msg instance to transform.
 * @return {!Object}
 */
proto.operators.KeyFrameValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    value: (f = msg.getValue()) && proto.operators.Value.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.operators.KeyFrameValue}
 */
proto.operators.KeyFrameValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.operators.KeyFrameValue;
  return proto.operators.KeyFrameValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.operators.KeyFrameValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.operators.KeyFrameValue}
 */
proto.operators.KeyFrameValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTime(value);
      break;
    case 2:
      var value = new proto.operators.Value;
      reader.readMessage(value,proto.operators.Value.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.operators.KeyFrameValue} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.operators.KeyFrameValue.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.operators.KeyFrameValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.operators.KeyFrameValue.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTime();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = this.getValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.operators.Value.serializeBinaryToWriter
    );
  }
};


/**
 * optional double time = 1;
 * @return {number}
 */
proto.operators.KeyFrameValue.prototype.getTime = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.operators.KeyFrameValue.prototype.setTime = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Value value = 2;
 * @return {?proto.operators.Value}
 */
proto.operators.KeyFrameValue.prototype.getValue = function() {
  return /** @type{?proto.operators.Value} */ (
    jspb.Message.getWrapperField(this, proto.operators.Value, 2));
};


/** @param {?proto.operators.Value|undefined} value */
proto.operators.KeyFrameValue.prototype.setValue = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.operators.KeyFrameValue.prototype.clearValue = function() {
  this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.operators.KeyFrameValue.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.operators.ExpressionValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.operators.ExpressionValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.operators.ExpressionValue.displayName = 'proto.operators.ExpressionValue';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.operators.ExpressionValue.prototype.toObject = function(opt_includeInstance) {
  return proto.operators.ExpressionValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.operators.ExpressionValue} msg The msg instance to transform.
 * @return {!Object}
 */
proto.operators.ExpressionValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    expression: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.operators.ExpressionValue}
 */
proto.operators.ExpressionValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.operators.ExpressionValue;
  return proto.operators.ExpressionValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.operators.ExpressionValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.operators.ExpressionValue}
 */
proto.operators.ExpressionValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setExpression(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.operators.ExpressionValue} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.operators.ExpressionValue.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.operators.ExpressionValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.operators.ExpressionValue.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getExpression();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string expression = 1;
 * @return {string}
 */
proto.operators.ExpressionValue.prototype.getExpression = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.operators.ExpressionValue.prototype.setExpression = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.operators.SetValueRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.operators.SetValueRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.operators.SetValueRequest.displayName = 'proto.operators.SetValueRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.operators.SetValueRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.operators.SetValueRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.operators.SetValueRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.operators.SetValueRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sceneId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    operatorId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    parameterId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    value: (f = msg.getValue()) && proto.operators.Value.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.operators.SetValueRequest}
 */
proto.operators.SetValueRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.operators.SetValueRequest;
  return proto.operators.SetValueRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.operators.SetValueRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.operators.SetValueRequest}
 */
proto.operators.SetValueRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSceneId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOperatorId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setParameterId(value);
      break;
    case 4:
      var value = new proto.operators.Value;
      reader.readMessage(value,proto.operators.Value.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.operators.SetValueRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.operators.SetValueRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.operators.SetValueRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.operators.SetValueRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSceneId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getOperatorId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getParameterId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getValue();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.operators.Value.serializeBinaryToWriter
    );
  }
};


/**
 * optional string scene_id = 1;
 * @return {string}
 */
proto.operators.SetValueRequest.prototype.getSceneId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.operators.SetValueRequest.prototype.setSceneId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string operator_id = 2;
 * @return {string}
 */
proto.operators.SetValueRequest.prototype.getOperatorId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.operators.SetValueRequest.prototype.setOperatorId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string parameter_id = 3;
 * @return {string}
 */
proto.operators.SetValueRequest.prototype.getParameterId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.operators.SetValueRequest.prototype.setParameterId = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional Value value = 4;
 * @return {?proto.operators.Value}
 */
proto.operators.SetValueRequest.prototype.getValue = function() {
  return /** @type{?proto.operators.Value} */ (
    jspb.Message.getWrapperField(this, proto.operators.Value, 4));
};


/** @param {?proto.operators.Value|undefined} value */
proto.operators.SetValueRequest.prototype.setValue = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.operators.SetValueRequest.prototype.clearValue = function() {
  this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.operators.SetValueRequest.prototype.hasValue = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.operators.SetKeyFrameRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.operators.SetKeyFrameRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.operators.SetKeyFrameRequest.displayName = 'proto.operators.SetKeyFrameRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.operators.SetKeyFrameRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.operators.SetKeyFrameRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.operators.SetKeyFrameRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.operators.SetKeyFrameRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sceneId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    operatorId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    parameterId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    keyframe: (f = msg.getKeyframe()) && proto.operators.KeyFrameValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.operators.SetKeyFrameRequest}
 */
proto.operators.SetKeyFrameRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.operators.SetKeyFrameRequest;
  return proto.operators.SetKeyFrameRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.operators.SetKeyFrameRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.operators.SetKeyFrameRequest}
 */
proto.operators.SetKeyFrameRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSceneId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOperatorId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setParameterId(value);
      break;
    case 4:
      var value = new proto.operators.KeyFrameValue;
      reader.readMessage(value,proto.operators.KeyFrameValue.deserializeBinaryFromReader);
      msg.setKeyframe(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.operators.SetKeyFrameRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.operators.SetKeyFrameRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.operators.SetKeyFrameRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.operators.SetKeyFrameRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSceneId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getOperatorId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getParameterId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getKeyframe();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.operators.KeyFrameValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional string scene_id = 1;
 * @return {string}
 */
proto.operators.SetKeyFrameRequest.prototype.getSceneId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.operators.SetKeyFrameRequest.prototype.setSceneId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string operator_id = 2;
 * @return {string}
 */
proto.operators.SetKeyFrameRequest.prototype.getOperatorId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.operators.SetKeyFrameRequest.prototype.setOperatorId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string parameter_id = 3;
 * @return {string}
 */
proto.operators.SetKeyFrameRequest.prototype.getParameterId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.operators.SetKeyFrameRequest.prototype.setParameterId = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional KeyFrameValue keyframe = 4;
 * @return {?proto.operators.KeyFrameValue}
 */
proto.operators.SetKeyFrameRequest.prototype.getKeyframe = function() {
  return /** @type{?proto.operators.KeyFrameValue} */ (
    jspb.Message.getWrapperField(this, proto.operators.KeyFrameValue, 4));
};


/** @param {?proto.operators.KeyFrameValue|undefined} value */
proto.operators.SetKeyFrameRequest.prototype.setKeyframe = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.operators.SetKeyFrameRequest.prototype.clearKeyframe = function() {
  this.setKeyframe(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.operators.SetKeyFrameRequest.prototype.hasKeyframe = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.operators.SetExpressionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.operators.SetExpressionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.operators.SetExpressionRequest.displayName = 'proto.operators.SetExpressionRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.operators.SetExpressionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.operators.SetExpressionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.operators.SetExpressionRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.operators.SetExpressionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sceneId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    operatorId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    parameterId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    expression: (f = msg.getExpression()) && proto.operators.ExpressionValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.operators.SetExpressionRequest}
 */
proto.operators.SetExpressionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.operators.SetExpressionRequest;
  return proto.operators.SetExpressionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.operators.SetExpressionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.operators.SetExpressionRequest}
 */
proto.operators.SetExpressionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSceneId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOperatorId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setParameterId(value);
      break;
    case 4:
      var value = new proto.operators.ExpressionValue;
      reader.readMessage(value,proto.operators.ExpressionValue.deserializeBinaryFromReader);
      msg.setExpression(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.operators.SetExpressionRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.operators.SetExpressionRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.operators.SetExpressionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.operators.SetExpressionRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSceneId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getOperatorId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getParameterId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getExpression();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.operators.ExpressionValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional string scene_id = 1;
 * @return {string}
 */
proto.operators.SetExpressionRequest.prototype.getSceneId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.operators.SetExpressionRequest.prototype.setSceneId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string operator_id = 2;
 * @return {string}
 */
proto.operators.SetExpressionRequest.prototype.getOperatorId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.operators.SetExpressionRequest.prototype.setOperatorId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string parameter_id = 3;
 * @return {string}
 */
proto.operators.SetExpressionRequest.prototype.getParameterId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.operators.SetExpressionRequest.prototype.setParameterId = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional ExpressionValue expression = 4;
 * @return {?proto.operators.ExpressionValue}
 */
proto.operators.SetExpressionRequest.prototype.getExpression = function() {
  return /** @type{?proto.operators.ExpressionValue} */ (
    jspb.Message.getWrapperField(this, proto.operators.ExpressionValue, 4));
};


/** @param {?proto.operators.ExpressionValue|undefined} value */
proto.operators.SetExpressionRequest.prototype.setExpression = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.operators.SetExpressionRequest.prototype.clearExpression = function() {
  this.setExpression(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.operators.SetExpressionRequest.prototype.hasExpression = function() {
  return jspb.Message.getField(this, 4) != null;
};


goog.object.extend(exports, proto.operators);
