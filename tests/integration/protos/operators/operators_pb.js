/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_api_annotations_pb = require('../google/api/annotations_pb.js');
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
var geometry_geometry_pb = require('../geometry/geometry_pb.js');
goog.exportSymbol('proto.operators.CreateOperatorRequest', null, global);
goog.exportSymbol('proto.operators.DeleteOperatorRequest', null, global);
goog.exportSymbol('proto.operators.GetOperatorRequest', null, global);
goog.exportSymbol('proto.operators.ListOperatorsRequest', null, global);
goog.exportSymbol('proto.operators.ListOperatorsResponse', null, global);
goog.exportSymbol('proto.operators.Operator', null, global);
goog.exportSymbol('proto.operators.RenderOperatorRequest', null, global);
goog.exportSymbol('proto.operators.RenderOperatorResponse', null, global);
goog.exportSymbol('proto.operators.RenderParameter', null, global);
goog.exportSymbol('proto.operators.RenderParameterRequest', null, global);
goog.exportSymbol('proto.operators.UpdateOperatorRequest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.operators.Operator = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.operators.Operator.repeatedFields_, null);
};
goog.inherits(proto.operators.Operator, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.operators.Operator.displayName = 'proto.operators.Operator';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.operators.Operator.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.operators.Operator.prototype.toObject = function(opt_includeInstance) {
  return proto.operators.Operator.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.operators.Operator} msg The msg instance to transform.
 * @return {!Object}
 */
proto.operators.Operator.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sceneId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    type: jspb.Message.getFieldWithDefault(msg, 3, ""),
    name: jspb.Message.getFieldWithDefault(msg, 4, ""),
    context: jspb.Message.getFieldWithDefault(msg, 5, ""),
    inputsList: jspb.Message.getField(msg, 6),
    parameterRoot: msg.getParameterRoot_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.operators.Operator}
 */
proto.operators.Operator.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.operators.Operator;
  return proto.operators.Operator.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.operators.Operator} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.operators.Operator}
 */
proto.operators.Operator.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSceneId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setContext(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addInputs(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setParameterRoot(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.operators.Operator} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.operators.Operator.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.operators.Operator.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.operators.Operator.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getSceneId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getContext();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getInputsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = this.getParameterRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.operators.Operator.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.operators.Operator.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string scene_id = 2;
 * @return {string}
 */
proto.operators.Operator.prototype.getSceneId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.operators.Operator.prototype.setSceneId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string type = 3;
 * @return {string}
 */
proto.operators.Operator.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.operators.Operator.prototype.setType = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.operators.Operator.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.operators.Operator.prototype.setName = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string context = 5;
 * @return {string}
 */
proto.operators.Operator.prototype.getContext = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.operators.Operator.prototype.setContext = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * repeated string inputs = 6;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.operators.Operator.prototype.getInputsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 6));
};


/** @param {!Array.<string>} value */
proto.operators.Operator.prototype.setInputsList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.operators.Operator.prototype.addInputs = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


proto.operators.Operator.prototype.clearInputsList = function() {
  this.setInputsList([]);
};


/**
 * optional bytes parameter_root = 7;
 * @return {!(string|Uint8Array)}
 */
proto.operators.Operator.prototype.getParameterRoot = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes parameter_root = 7;
 * This is a type-conversion wrapper around `getParameterRoot()`
 * @return {string}
 */
proto.operators.Operator.prototype.getParameterRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getParameterRoot()));
};


/**
 * optional bytes parameter_root = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getParameterRoot()`
 * @return {!Uint8Array}
 */
proto.operators.Operator.prototype.getParameterRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getParameterRoot()));
};


/** @param {!(string|Uint8Array)} value */
proto.operators.Operator.prototype.setParameterRoot = function(value) {
  jspb.Message.setField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.operators.ListOperatorsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.operators.ListOperatorsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.operators.ListOperatorsRequest.displayName = 'proto.operators.ListOperatorsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.operators.ListOperatorsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.operators.ListOperatorsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.operators.ListOperatorsRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.operators.ListOperatorsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    pageSize: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pageToken: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.operators.ListOperatorsRequest}
 */
proto.operators.ListOperatorsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.operators.ListOperatorsRequest;
  return proto.operators.ListOperatorsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.operators.ListOperatorsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.operators.ListOperatorsRequest}
 */
proto.operators.ListOperatorsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPageSize(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPageToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.operators.ListOperatorsRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.operators.ListOperatorsRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.operators.ListOperatorsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.operators.ListOperatorsRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPageSize();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getPageToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 page_size = 1;
 * @return {number}
 */
proto.operators.ListOperatorsRequest.prototype.getPageSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.operators.ListOperatorsRequest.prototype.setPageSize = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string page_token = 2;
 * @return {string}
 */
proto.operators.ListOperatorsRequest.prototype.getPageToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.operators.ListOperatorsRequest.prototype.setPageToken = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.operators.ListOperatorsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.operators.ListOperatorsResponse.repeatedFields_, null);
};
goog.inherits(proto.operators.ListOperatorsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.operators.ListOperatorsResponse.displayName = 'proto.operators.ListOperatorsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.operators.ListOperatorsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.operators.ListOperatorsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.operators.ListOperatorsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.operators.ListOperatorsResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.operators.ListOperatorsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    operatorsList: jspb.Message.toObjectList(msg.getOperatorsList(),
    proto.operators.Operator.toObject, includeInstance),
    nextPageToken: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.operators.ListOperatorsResponse}
 */
proto.operators.ListOperatorsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.operators.ListOperatorsResponse;
  return proto.operators.ListOperatorsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.operators.ListOperatorsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.operators.ListOperatorsResponse}
 */
proto.operators.ListOperatorsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.operators.Operator;
      reader.readMessage(value,proto.operators.Operator.deserializeBinaryFromReader);
      msg.addOperators(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextPageToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.operators.ListOperatorsResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.operators.ListOperatorsResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.operators.ListOperatorsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.operators.ListOperatorsResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getOperatorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.operators.Operator.serializeBinaryToWriter
    );
  }
  f = this.getNextPageToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * repeated Operator operators = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.operators.Operator>}
 */
proto.operators.ListOperatorsResponse.prototype.getOperatorsList = function() {
  return /** @type{!Array.<!proto.operators.Operator>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.operators.Operator, 1));
};


/** @param {!Array.<!proto.operators.Operator>} value */
proto.operators.ListOperatorsResponse.prototype.setOperatorsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.operators.Operator=} opt_value
 * @param {number=} opt_index
 * @return {!proto.operators.Operator}
 */
proto.operators.ListOperatorsResponse.prototype.addOperators = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.operators.Operator, opt_index);
};


proto.operators.ListOperatorsResponse.prototype.clearOperatorsList = function() {
  this.setOperatorsList([]);
};


/**
 * optional string next_page_token = 2;
 * @return {string}
 */
proto.operators.ListOperatorsResponse.prototype.getNextPageToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.operators.ListOperatorsResponse.prototype.setNextPageToken = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.operators.GetOperatorRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.operators.GetOperatorRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.operators.GetOperatorRequest.displayName = 'proto.operators.GetOperatorRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.operators.GetOperatorRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.operators.GetOperatorRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.operators.GetOperatorRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.operators.GetOperatorRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.operators.GetOperatorRequest}
 */
proto.operators.GetOperatorRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.operators.GetOperatorRequest;
  return proto.operators.GetOperatorRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.operators.GetOperatorRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.operators.GetOperatorRequest}
 */
proto.operators.GetOperatorRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.operators.GetOperatorRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.operators.GetOperatorRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.operators.GetOperatorRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.operators.GetOperatorRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.operators.GetOperatorRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.operators.GetOperatorRequest.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.operators.CreateOperatorRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.operators.CreateOperatorRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.operators.CreateOperatorRequest.displayName = 'proto.operators.CreateOperatorRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.operators.CreateOperatorRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.operators.CreateOperatorRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.operators.CreateOperatorRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.operators.CreateOperatorRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    operator: (f = msg.getOperator()) && proto.operators.Operator.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.operators.CreateOperatorRequest}
 */
proto.operators.CreateOperatorRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.operators.CreateOperatorRequest;
  return proto.operators.CreateOperatorRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.operators.CreateOperatorRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.operators.CreateOperatorRequest}
 */
proto.operators.CreateOperatorRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.operators.Operator;
      reader.readMessage(value,proto.operators.Operator.deserializeBinaryFromReader);
      msg.setOperator(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.operators.CreateOperatorRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.operators.CreateOperatorRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.operators.CreateOperatorRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.operators.CreateOperatorRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getOperator();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.operators.Operator.serializeBinaryToWriter
    );
  }
};


/**
 * optional Operator operator = 1;
 * @return {?proto.operators.Operator}
 */
proto.operators.CreateOperatorRequest.prototype.getOperator = function() {
  return /** @type{?proto.operators.Operator} */ (
    jspb.Message.getWrapperField(this, proto.operators.Operator, 1));
};


/** @param {?proto.operators.Operator|undefined} value */
proto.operators.CreateOperatorRequest.prototype.setOperator = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.operators.CreateOperatorRequest.prototype.clearOperator = function() {
  this.setOperator(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.operators.CreateOperatorRequest.prototype.hasOperator = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.operators.UpdateOperatorRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.operators.UpdateOperatorRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.operators.UpdateOperatorRequest.displayName = 'proto.operators.UpdateOperatorRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.operators.UpdateOperatorRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.operators.UpdateOperatorRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.operators.UpdateOperatorRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.operators.UpdateOperatorRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    operator: (f = msg.getOperator()) && proto.operators.Operator.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.operators.UpdateOperatorRequest}
 */
proto.operators.UpdateOperatorRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.operators.UpdateOperatorRequest;
  return proto.operators.UpdateOperatorRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.operators.UpdateOperatorRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.operators.UpdateOperatorRequest}
 */
proto.operators.UpdateOperatorRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.operators.Operator;
      reader.readMessage(value,proto.operators.Operator.deserializeBinaryFromReader);
      msg.setOperator(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.operators.UpdateOperatorRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.operators.UpdateOperatorRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.operators.UpdateOperatorRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.operators.UpdateOperatorRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getOperator();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.operators.Operator.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.operators.UpdateOperatorRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.operators.UpdateOperatorRequest.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Operator operator = 2;
 * @return {?proto.operators.Operator}
 */
proto.operators.UpdateOperatorRequest.prototype.getOperator = function() {
  return /** @type{?proto.operators.Operator} */ (
    jspb.Message.getWrapperField(this, proto.operators.Operator, 2));
};


/** @param {?proto.operators.Operator|undefined} value */
proto.operators.UpdateOperatorRequest.prototype.setOperator = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.operators.UpdateOperatorRequest.prototype.clearOperator = function() {
  this.setOperator(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.operators.UpdateOperatorRequest.prototype.hasOperator = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.operators.DeleteOperatorRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.operators.DeleteOperatorRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.operators.DeleteOperatorRequest.displayName = 'proto.operators.DeleteOperatorRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.operators.DeleteOperatorRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.operators.DeleteOperatorRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.operators.DeleteOperatorRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.operators.DeleteOperatorRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.operators.DeleteOperatorRequest}
 */
proto.operators.DeleteOperatorRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.operators.DeleteOperatorRequest;
  return proto.operators.DeleteOperatorRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.operators.DeleteOperatorRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.operators.DeleteOperatorRequest}
 */
proto.operators.DeleteOperatorRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.operators.DeleteOperatorRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.operators.DeleteOperatorRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.operators.DeleteOperatorRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.operators.DeleteOperatorRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.operators.DeleteOperatorRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.operators.DeleteOperatorRequest.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.operators.RenderOperatorRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.operators.RenderOperatorRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.operators.RenderOperatorRequest.displayName = 'proto.operators.RenderOperatorRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.operators.RenderOperatorRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.operators.RenderOperatorRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.operators.RenderOperatorRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.operators.RenderOperatorRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    time: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    boundingBox: (f = msg.getBoundingBox()) && geometry_geometry_pb.BoundingBox2D.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.operators.RenderOperatorRequest}
 */
proto.operators.RenderOperatorRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.operators.RenderOperatorRequest;
  return proto.operators.RenderOperatorRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.operators.RenderOperatorRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.operators.RenderOperatorRequest}
 */
proto.operators.RenderOperatorRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTime(value);
      break;
    case 3:
      var value = new geometry_geometry_pb.BoundingBox2D;
      reader.readMessage(value,geometry_geometry_pb.BoundingBox2D.deserializeBinaryFromReader);
      msg.setBoundingBox(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.operators.RenderOperatorRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.operators.RenderOperatorRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.operators.RenderOperatorRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.operators.RenderOperatorRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getTime();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = this.getBoundingBox();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      geometry_geometry_pb.BoundingBox2D.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.operators.RenderOperatorRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.operators.RenderOperatorRequest.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional double time = 2;
 * @return {number}
 */
proto.operators.RenderOperatorRequest.prototype.getTime = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.operators.RenderOperatorRequest.prototype.setTime = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional geometry.BoundingBox2D bounding_box = 3;
 * @return {?proto.geometry.BoundingBox2D}
 */
proto.operators.RenderOperatorRequest.prototype.getBoundingBox = function() {
  return /** @type{?proto.geometry.BoundingBox2D} */ (
    jspb.Message.getWrapperField(this, geometry_geometry_pb.BoundingBox2D, 3));
};


/** @param {?proto.geometry.BoundingBox2D|undefined} value */
proto.operators.RenderOperatorRequest.prototype.setBoundingBox = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.operators.RenderOperatorRequest.prototype.clearBoundingBox = function() {
  this.setBoundingBox(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.operators.RenderOperatorRequest.prototype.hasBoundingBox = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.operators.RenderOperatorResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.operators.RenderOperatorResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.operators.RenderOperatorResponse.displayName = 'proto.operators.RenderOperatorResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.operators.RenderOperatorResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.operators.RenderOperatorResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.operators.RenderOperatorResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.operators.RenderOperatorResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultUrl: jspb.Message.getFieldWithDefault(msg, 1, ""),
    resultType: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.operators.RenderOperatorResponse}
 */
proto.operators.RenderOperatorResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.operators.RenderOperatorResponse;
  return proto.operators.RenderOperatorResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.operators.RenderOperatorResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.operators.RenderOperatorResponse}
 */
proto.operators.RenderOperatorResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setResultUrl(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setResultType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.operators.RenderOperatorResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.operators.RenderOperatorResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.operators.RenderOperatorResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.operators.RenderOperatorResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getResultUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getResultType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string result_url = 1;
 * @return {string}
 */
proto.operators.RenderOperatorResponse.prototype.getResultUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.operators.RenderOperatorResponse.prototype.setResultUrl = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string result_type = 2;
 * @return {string}
 */
proto.operators.RenderOperatorResponse.prototype.getResultType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.operators.RenderOperatorResponse.prototype.setResultType = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.operators.RenderParameterRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.operators.RenderParameterRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.operators.RenderParameterRequest.displayName = 'proto.operators.RenderParameterRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.operators.RenderParameterRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.operators.RenderParameterRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.operators.RenderParameterRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.operators.RenderParameterRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    operatorKey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    time: +jspb.Message.getFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.operators.RenderParameterRequest}
 */
proto.operators.RenderParameterRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.operators.RenderParameterRequest;
  return proto.operators.RenderParameterRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.operators.RenderParameterRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.operators.RenderParameterRequest}
 */
proto.operators.RenderParameterRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOperatorKey(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.operators.RenderParameterRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.operators.RenderParameterRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.operators.RenderParameterRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.operators.RenderParameterRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getOperatorKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getTime();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional string operator_key = 1;
 * @return {string}
 */
proto.operators.RenderParameterRequest.prototype.getOperatorKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.operators.RenderParameterRequest.prototype.setOperatorKey = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional double time = 2;
 * @return {number}
 */
proto.operators.RenderParameterRequest.prototype.getTime = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.operators.RenderParameterRequest.prototype.setTime = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.operators.RenderParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.operators.RenderParameter.repeatedFields_, null);
};
goog.inherits(proto.operators.RenderParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.operators.RenderParameter.displayName = 'proto.operators.RenderParameter';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.operators.RenderParameter.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.operators.RenderParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.operators.RenderParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.operators.RenderParameter} msg The msg instance to transform.
 * @return {!Object}
 */
proto.operators.RenderParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, ""),
    configuration: msg.getConfiguration_asB64(),
    inputsList: jspb.Message.toObjectList(msg.getInputsList(),
    proto.operators.RenderParameter.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.operators.RenderParameter}
 */
proto.operators.RenderParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.operators.RenderParameter;
  return proto.operators.RenderParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.operators.RenderParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.operators.RenderParameter}
 */
proto.operators.RenderParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setConfiguration(value);
      break;
    case 3:
      var value = new proto.operators.RenderParameter;
      reader.readMessage(value,proto.operators.RenderParameter.deserializeBinaryFromReader);
      msg.addInputs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.operators.RenderParameter} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.operators.RenderParameter.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.operators.RenderParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.operators.RenderParameter.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getConfiguration_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = this.getInputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.operators.RenderParameter.serializeBinaryToWriter
    );
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.operators.RenderParameter.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.operators.RenderParameter.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes configuration = 2;
 * @return {!(string|Uint8Array)}
 */
proto.operators.RenderParameter.prototype.getConfiguration = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes configuration = 2;
 * This is a type-conversion wrapper around `getConfiguration()`
 * @return {string}
 */
proto.operators.RenderParameter.prototype.getConfiguration_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getConfiguration()));
};


/**
 * optional bytes configuration = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getConfiguration()`
 * @return {!Uint8Array}
 */
proto.operators.RenderParameter.prototype.getConfiguration_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getConfiguration()));
};


/** @param {!(string|Uint8Array)} value */
proto.operators.RenderParameter.prototype.setConfiguration = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated RenderParameter inputs = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.operators.RenderParameter>}
 */
proto.operators.RenderParameter.prototype.getInputsList = function() {
  return /** @type{!Array.<!proto.operators.RenderParameter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.operators.RenderParameter, 3));
};


/** @param {!Array.<!proto.operators.RenderParameter>} value */
proto.operators.RenderParameter.prototype.setInputsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.operators.RenderParameter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.operators.RenderParameter}
 */
proto.operators.RenderParameter.prototype.addInputs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.operators.RenderParameter, opt_index);
};


proto.operators.RenderParameter.prototype.clearInputsList = function() {
  this.setInputsList([]);
};


goog.object.extend(exports, proto.operators);
