/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_api_annotations_pb = require('../google/api/annotations_pb.js');
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.exportSymbol('proto.parameters.CreateParameterRootRequest', null, global);
goog.exportSymbol('proto.parameters.DeleteParameterRootRequest', null, global);
goog.exportSymbol('proto.parameters.GetParameterRootRequest', null, global);
goog.exportSymbol('proto.parameters.ParameterRoot', null, global);
goog.exportSymbol('proto.parameters.UpdateParameterRootRequest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.parameters.ParameterRoot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.parameters.ParameterRoot.repeatedFields_, null);
};
goog.inherits(proto.parameters.ParameterRoot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.parameters.ParameterRoot.displayName = 'proto.parameters.ParameterRoot';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.parameters.ParameterRoot.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.parameters.ParameterRoot.prototype.toObject = function(opt_includeInstance) {
  return proto.parameters.ParameterRoot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.parameters.ParameterRoot} msg The msg instance to transform.
 * @return {!Object}
 */
proto.parameters.ParameterRoot.toObject = function(includeInstance, msg) {
  var f, obj = {
    operatorId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    children: msg.getChildren_asB64(),
    orderList: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.parameters.ParameterRoot}
 */
proto.parameters.ParameterRoot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.parameters.ParameterRoot;
  return proto.parameters.ParameterRoot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.parameters.ParameterRoot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.parameters.ParameterRoot}
 */
proto.parameters.ParameterRoot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOperatorId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChildren(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addOrder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.parameters.ParameterRoot} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.parameters.ParameterRoot.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.parameters.ParameterRoot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.parameters.ParameterRoot.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getOperatorId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getChildren_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = this.getOrderList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional string operator_id = 1;
 * @return {string}
 */
proto.parameters.ParameterRoot.prototype.getOperatorId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.parameters.ParameterRoot.prototype.setOperatorId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes children = 2;
 * @return {!(string|Uint8Array)}
 */
proto.parameters.ParameterRoot.prototype.getChildren = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes children = 2;
 * This is a type-conversion wrapper around `getChildren()`
 * @return {string}
 */
proto.parameters.ParameterRoot.prototype.getChildren_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChildren()));
};


/**
 * optional bytes children = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChildren()`
 * @return {!Uint8Array}
 */
proto.parameters.ParameterRoot.prototype.getChildren_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChildren()));
};


/** @param {!(string|Uint8Array)} value */
proto.parameters.ParameterRoot.prototype.setChildren = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated string order = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.parameters.ParameterRoot.prototype.getOrderList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 3));
};


/** @param {!Array.<string>} value */
proto.parameters.ParameterRoot.prototype.setOrderList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.parameters.ParameterRoot.prototype.addOrder = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.parameters.ParameterRoot.prototype.clearOrderList = function() {
  this.setOrderList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.parameters.GetParameterRootRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.parameters.GetParameterRootRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.parameters.GetParameterRootRequest.displayName = 'proto.parameters.GetParameterRootRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.parameters.GetParameterRootRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.parameters.GetParameterRootRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.parameters.GetParameterRootRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.parameters.GetParameterRootRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    operatorId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.parameters.GetParameterRootRequest}
 */
proto.parameters.GetParameterRootRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.parameters.GetParameterRootRequest;
  return proto.parameters.GetParameterRootRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.parameters.GetParameterRootRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.parameters.GetParameterRootRequest}
 */
proto.parameters.GetParameterRootRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOperatorId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.parameters.GetParameterRootRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.parameters.GetParameterRootRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.parameters.GetParameterRootRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.parameters.GetParameterRootRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getOperatorId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string operator_id = 1;
 * @return {string}
 */
proto.parameters.GetParameterRootRequest.prototype.getOperatorId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.parameters.GetParameterRootRequest.prototype.setOperatorId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.parameters.CreateParameterRootRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.parameters.CreateParameterRootRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.parameters.CreateParameterRootRequest.displayName = 'proto.parameters.CreateParameterRootRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.parameters.CreateParameterRootRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.parameters.CreateParameterRootRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.parameters.CreateParameterRootRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.parameters.CreateParameterRootRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    operatorId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    parameterRoot: (f = msg.getParameterRoot()) && proto.parameters.ParameterRoot.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.parameters.CreateParameterRootRequest}
 */
proto.parameters.CreateParameterRootRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.parameters.CreateParameterRootRequest;
  return proto.parameters.CreateParameterRootRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.parameters.CreateParameterRootRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.parameters.CreateParameterRootRequest}
 */
proto.parameters.CreateParameterRootRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOperatorId(value);
      break;
    case 2:
      var value = new proto.parameters.ParameterRoot;
      reader.readMessage(value,proto.parameters.ParameterRoot.deserializeBinaryFromReader);
      msg.setParameterRoot(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.parameters.CreateParameterRootRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.parameters.CreateParameterRootRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.parameters.CreateParameterRootRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.parameters.CreateParameterRootRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getOperatorId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getParameterRoot();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.parameters.ParameterRoot.serializeBinaryToWriter
    );
  }
};


/**
 * optional string operator_id = 1;
 * @return {string}
 */
proto.parameters.CreateParameterRootRequest.prototype.getOperatorId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.parameters.CreateParameterRootRequest.prototype.setOperatorId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional ParameterRoot parameter_root = 2;
 * @return {?proto.parameters.ParameterRoot}
 */
proto.parameters.CreateParameterRootRequest.prototype.getParameterRoot = function() {
  return /** @type{?proto.parameters.ParameterRoot} */ (
    jspb.Message.getWrapperField(this, proto.parameters.ParameterRoot, 2));
};


/** @param {?proto.parameters.ParameterRoot|undefined} value */
proto.parameters.CreateParameterRootRequest.prototype.setParameterRoot = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.parameters.CreateParameterRootRequest.prototype.clearParameterRoot = function() {
  this.setParameterRoot(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.parameters.CreateParameterRootRequest.prototype.hasParameterRoot = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.parameters.UpdateParameterRootRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.parameters.UpdateParameterRootRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.parameters.UpdateParameterRootRequest.displayName = 'proto.parameters.UpdateParameterRootRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.parameters.UpdateParameterRootRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.parameters.UpdateParameterRootRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.parameters.UpdateParameterRootRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.parameters.UpdateParameterRootRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    operatorId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    parameterRoot: (f = msg.getParameterRoot()) && proto.parameters.ParameterRoot.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.parameters.UpdateParameterRootRequest}
 */
proto.parameters.UpdateParameterRootRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.parameters.UpdateParameterRootRequest;
  return proto.parameters.UpdateParameterRootRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.parameters.UpdateParameterRootRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.parameters.UpdateParameterRootRequest}
 */
proto.parameters.UpdateParameterRootRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOperatorId(value);
      break;
    case 2:
      var value = new proto.parameters.ParameterRoot;
      reader.readMessage(value,proto.parameters.ParameterRoot.deserializeBinaryFromReader);
      msg.setParameterRoot(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.parameters.UpdateParameterRootRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.parameters.UpdateParameterRootRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.parameters.UpdateParameterRootRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.parameters.UpdateParameterRootRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getOperatorId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getParameterRoot();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.parameters.ParameterRoot.serializeBinaryToWriter
    );
  }
};


/**
 * optional string operator_id = 1;
 * @return {string}
 */
proto.parameters.UpdateParameterRootRequest.prototype.getOperatorId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.parameters.UpdateParameterRootRequest.prototype.setOperatorId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional ParameterRoot parameter_root = 2;
 * @return {?proto.parameters.ParameterRoot}
 */
proto.parameters.UpdateParameterRootRequest.prototype.getParameterRoot = function() {
  return /** @type{?proto.parameters.ParameterRoot} */ (
    jspb.Message.getWrapperField(this, proto.parameters.ParameterRoot, 2));
};


/** @param {?proto.parameters.ParameterRoot|undefined} value */
proto.parameters.UpdateParameterRootRequest.prototype.setParameterRoot = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.parameters.UpdateParameterRootRequest.prototype.clearParameterRoot = function() {
  this.setParameterRoot(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.parameters.UpdateParameterRootRequest.prototype.hasParameterRoot = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.parameters.DeleteParameterRootRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.parameters.DeleteParameterRootRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.parameters.DeleteParameterRootRequest.displayName = 'proto.parameters.DeleteParameterRootRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.parameters.DeleteParameterRootRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.parameters.DeleteParameterRootRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.parameters.DeleteParameterRootRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.parameters.DeleteParameterRootRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    operatorId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.parameters.DeleteParameterRootRequest}
 */
proto.parameters.DeleteParameterRootRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.parameters.DeleteParameterRootRequest;
  return proto.parameters.DeleteParameterRootRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.parameters.DeleteParameterRootRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.parameters.DeleteParameterRootRequest}
 */
proto.parameters.DeleteParameterRootRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOperatorId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.parameters.DeleteParameterRootRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.parameters.DeleteParameterRootRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.parameters.DeleteParameterRootRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.parameters.DeleteParameterRootRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getOperatorId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string operator_id = 1;
 * @return {string}
 */
proto.parameters.DeleteParameterRootRequest.prototype.getOperatorId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.parameters.DeleteParameterRootRequest.prototype.setOperatorId = function(value) {
  jspb.Message.setField(this, 1, value);
};


goog.object.extend(exports, proto.parameters);
