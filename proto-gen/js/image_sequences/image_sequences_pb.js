/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_api_annotations_pb = require('../google/api/annotations_pb.js');
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.exportSymbol('proto.image_sequences.CreateImageSequenceRequest', null, global);
goog.exportSymbol('proto.image_sequences.DeleteImageSequenceRequest', null, global);
goog.exportSymbol('proto.image_sequences.GetImageSequenceRequest', null, global);
goog.exportSymbol('proto.image_sequences.ImageSequence', null, global);
goog.exportSymbol('proto.image_sequences.ListImageSequencesRequest', null, global);
goog.exportSymbol('proto.image_sequences.ListImageSequencesResponse', null, global);
goog.exportSymbol('proto.image_sequences.UpdateImageSequenceRequest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.image_sequences.ImageSequence = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.image_sequences.ImageSequence, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.image_sequences.ImageSequence.displayName = 'proto.image_sequences.ImageSequence';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.image_sequences.ImageSequence.prototype.toObject = function(opt_includeInstance) {
  return proto.image_sequences.ImageSequence.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.image_sequences.ImageSequence} msg The msg instance to transform.
 * @return {!Object}
 */
proto.image_sequences.ImageSequence.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    projectId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.image_sequences.ImageSequence}
 */
proto.image_sequences.ImageSequence.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.image_sequences.ImageSequence;
  return proto.image_sequences.ImageSequence.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.image_sequences.ImageSequence} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.image_sequences.ImageSequence}
 */
proto.image_sequences.ImageSequence.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProjectId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.image_sequences.ImageSequence} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.image_sequences.ImageSequence.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.image_sequences.ImageSequence.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.image_sequences.ImageSequence.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getProjectId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.image_sequences.ImageSequence.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.image_sequences.ImageSequence.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string project_id = 2;
 * @return {string}
 */
proto.image_sequences.ImageSequence.prototype.getProjectId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.image_sequences.ImageSequence.prototype.setProjectId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.image_sequences.ImageSequence.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.image_sequences.ImageSequence.prototype.setName = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.image_sequences.ListImageSequencesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.image_sequences.ListImageSequencesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.image_sequences.ListImageSequencesRequest.displayName = 'proto.image_sequences.ListImageSequencesRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.image_sequences.ListImageSequencesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.image_sequences.ListImageSequencesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.image_sequences.ListImageSequencesRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.image_sequences.ListImageSequencesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    pageSize: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pageToken: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.image_sequences.ListImageSequencesRequest}
 */
proto.image_sequences.ListImageSequencesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.image_sequences.ListImageSequencesRequest;
  return proto.image_sequences.ListImageSequencesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.image_sequences.ListImageSequencesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.image_sequences.ListImageSequencesRequest}
 */
proto.image_sequences.ListImageSequencesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPageSize(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPageToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.image_sequences.ListImageSequencesRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.image_sequences.ListImageSequencesRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.image_sequences.ListImageSequencesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.image_sequences.ListImageSequencesRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPageSize();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getPageToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 page_size = 1;
 * @return {number}
 */
proto.image_sequences.ListImageSequencesRequest.prototype.getPageSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.image_sequences.ListImageSequencesRequest.prototype.setPageSize = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string page_token = 2;
 * @return {string}
 */
proto.image_sequences.ListImageSequencesRequest.prototype.getPageToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.image_sequences.ListImageSequencesRequest.prototype.setPageToken = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.image_sequences.ListImageSequencesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.image_sequences.ListImageSequencesResponse.repeatedFields_, null);
};
goog.inherits(proto.image_sequences.ListImageSequencesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.image_sequences.ListImageSequencesResponse.displayName = 'proto.image_sequences.ListImageSequencesResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.image_sequences.ListImageSequencesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.image_sequences.ListImageSequencesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.image_sequences.ListImageSequencesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.image_sequences.ListImageSequencesResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.image_sequences.ListImageSequencesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    imageSequencesList: jspb.Message.toObjectList(msg.getImageSequencesList(),
    proto.image_sequences.ImageSequence.toObject, includeInstance),
    nextPageToken: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.image_sequences.ListImageSequencesResponse}
 */
proto.image_sequences.ListImageSequencesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.image_sequences.ListImageSequencesResponse;
  return proto.image_sequences.ListImageSequencesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.image_sequences.ListImageSequencesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.image_sequences.ListImageSequencesResponse}
 */
proto.image_sequences.ListImageSequencesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.image_sequences.ImageSequence;
      reader.readMessage(value,proto.image_sequences.ImageSequence.deserializeBinaryFromReader);
      msg.addImageSequences(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextPageToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.image_sequences.ListImageSequencesResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.image_sequences.ListImageSequencesResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.image_sequences.ListImageSequencesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.image_sequences.ListImageSequencesResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getImageSequencesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.image_sequences.ImageSequence.serializeBinaryToWriter
    );
  }
  f = this.getNextPageToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * repeated ImageSequence image_sequences = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.image_sequences.ImageSequence>}
 */
proto.image_sequences.ListImageSequencesResponse.prototype.getImageSequencesList = function() {
  return /** @type{!Array.<!proto.image_sequences.ImageSequence>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.image_sequences.ImageSequence, 1));
};


/** @param {!Array.<!proto.image_sequences.ImageSequence>} value */
proto.image_sequences.ListImageSequencesResponse.prototype.setImageSequencesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.image_sequences.ImageSequence=} opt_value
 * @param {number=} opt_index
 * @return {!proto.image_sequences.ImageSequence}
 */
proto.image_sequences.ListImageSequencesResponse.prototype.addImageSequences = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.image_sequences.ImageSequence, opt_index);
};


proto.image_sequences.ListImageSequencesResponse.prototype.clearImageSequencesList = function() {
  this.setImageSequencesList([]);
};


/**
 * optional string next_page_token = 2;
 * @return {string}
 */
proto.image_sequences.ListImageSequencesResponse.prototype.getNextPageToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.image_sequences.ListImageSequencesResponse.prototype.setNextPageToken = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.image_sequences.GetImageSequenceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.image_sequences.GetImageSequenceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.image_sequences.GetImageSequenceRequest.displayName = 'proto.image_sequences.GetImageSequenceRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.image_sequences.GetImageSequenceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.image_sequences.GetImageSequenceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.image_sequences.GetImageSequenceRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.image_sequences.GetImageSequenceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.image_sequences.GetImageSequenceRequest}
 */
proto.image_sequences.GetImageSequenceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.image_sequences.GetImageSequenceRequest;
  return proto.image_sequences.GetImageSequenceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.image_sequences.GetImageSequenceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.image_sequences.GetImageSequenceRequest}
 */
proto.image_sequences.GetImageSequenceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.image_sequences.GetImageSequenceRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.image_sequences.GetImageSequenceRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.image_sequences.GetImageSequenceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.image_sequences.GetImageSequenceRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.image_sequences.GetImageSequenceRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.image_sequences.GetImageSequenceRequest.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.image_sequences.CreateImageSequenceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.image_sequences.CreateImageSequenceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.image_sequences.CreateImageSequenceRequest.displayName = 'proto.image_sequences.CreateImageSequenceRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.image_sequences.CreateImageSequenceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.image_sequences.CreateImageSequenceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.image_sequences.CreateImageSequenceRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.image_sequences.CreateImageSequenceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    imageSequence: (f = msg.getImageSequence()) && proto.image_sequences.ImageSequence.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.image_sequences.CreateImageSequenceRequest}
 */
proto.image_sequences.CreateImageSequenceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.image_sequences.CreateImageSequenceRequest;
  return proto.image_sequences.CreateImageSequenceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.image_sequences.CreateImageSequenceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.image_sequences.CreateImageSequenceRequest}
 */
proto.image_sequences.CreateImageSequenceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.image_sequences.ImageSequence;
      reader.readMessage(value,proto.image_sequences.ImageSequence.deserializeBinaryFromReader);
      msg.setImageSequence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.image_sequences.CreateImageSequenceRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.image_sequences.CreateImageSequenceRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.image_sequences.CreateImageSequenceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.image_sequences.CreateImageSequenceRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getImageSequence();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.image_sequences.ImageSequence.serializeBinaryToWriter
    );
  }
};


/**
 * optional ImageSequence image_sequence = 1;
 * @return {?proto.image_sequences.ImageSequence}
 */
proto.image_sequences.CreateImageSequenceRequest.prototype.getImageSequence = function() {
  return /** @type{?proto.image_sequences.ImageSequence} */ (
    jspb.Message.getWrapperField(this, proto.image_sequences.ImageSequence, 1));
};


/** @param {?proto.image_sequences.ImageSequence|undefined} value */
proto.image_sequences.CreateImageSequenceRequest.prototype.setImageSequence = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.image_sequences.CreateImageSequenceRequest.prototype.clearImageSequence = function() {
  this.setImageSequence(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.image_sequences.CreateImageSequenceRequest.prototype.hasImageSequence = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.image_sequences.UpdateImageSequenceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.image_sequences.UpdateImageSequenceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.image_sequences.UpdateImageSequenceRequest.displayName = 'proto.image_sequences.UpdateImageSequenceRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.image_sequences.UpdateImageSequenceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.image_sequences.UpdateImageSequenceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.image_sequences.UpdateImageSequenceRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.image_sequences.UpdateImageSequenceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    imageSequence: (f = msg.getImageSequence()) && proto.image_sequences.ImageSequence.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.image_sequences.UpdateImageSequenceRequest}
 */
proto.image_sequences.UpdateImageSequenceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.image_sequences.UpdateImageSequenceRequest;
  return proto.image_sequences.UpdateImageSequenceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.image_sequences.UpdateImageSequenceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.image_sequences.UpdateImageSequenceRequest}
 */
proto.image_sequences.UpdateImageSequenceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.image_sequences.ImageSequence;
      reader.readMessage(value,proto.image_sequences.ImageSequence.deserializeBinaryFromReader);
      msg.setImageSequence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.image_sequences.UpdateImageSequenceRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.image_sequences.UpdateImageSequenceRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.image_sequences.UpdateImageSequenceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.image_sequences.UpdateImageSequenceRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getImageSequence();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.image_sequences.ImageSequence.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.image_sequences.UpdateImageSequenceRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.image_sequences.UpdateImageSequenceRequest.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional ImageSequence image_sequence = 2;
 * @return {?proto.image_sequences.ImageSequence}
 */
proto.image_sequences.UpdateImageSequenceRequest.prototype.getImageSequence = function() {
  return /** @type{?proto.image_sequences.ImageSequence} */ (
    jspb.Message.getWrapperField(this, proto.image_sequences.ImageSequence, 2));
};


/** @param {?proto.image_sequences.ImageSequence|undefined} value */
proto.image_sequences.UpdateImageSequenceRequest.prototype.setImageSequence = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.image_sequences.UpdateImageSequenceRequest.prototype.clearImageSequence = function() {
  this.setImageSequence(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.image_sequences.UpdateImageSequenceRequest.prototype.hasImageSequence = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.image_sequences.DeleteImageSequenceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.image_sequences.DeleteImageSequenceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.image_sequences.DeleteImageSequenceRequest.displayName = 'proto.image_sequences.DeleteImageSequenceRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.image_sequences.DeleteImageSequenceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.image_sequences.DeleteImageSequenceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.image_sequences.DeleteImageSequenceRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.image_sequences.DeleteImageSequenceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.image_sequences.DeleteImageSequenceRequest}
 */
proto.image_sequences.DeleteImageSequenceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.image_sequences.DeleteImageSequenceRequest;
  return proto.image_sequences.DeleteImageSequenceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.image_sequences.DeleteImageSequenceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.image_sequences.DeleteImageSequenceRequest}
 */
proto.image_sequences.DeleteImageSequenceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.image_sequences.DeleteImageSequenceRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.image_sequences.DeleteImageSequenceRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.image_sequences.DeleteImageSequenceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.image_sequences.DeleteImageSequenceRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.image_sequences.DeleteImageSequenceRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.image_sequences.DeleteImageSequenceRequest.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


goog.object.extend(exports, proto.image_sequences);
