/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_api_annotations_pb = require('../google/api/annotations_pb.js');
goog.exportSymbol('proto.scene_events.CreateSceneEventRequest', null, global);
goog.exportSymbol('proto.scene_events.GetSceneEventRequest', null, global);
goog.exportSymbol('proto.scene_events.ListSceneEventsRequest', null, global);
goog.exportSymbol('proto.scene_events.ListSceneEventsResponse', null, global);
goog.exportSymbol('proto.scene_events.SceneEvent', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scene_events.SceneEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scene_events.SceneEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scene_events.SceneEvent.displayName = 'proto.scene_events.SceneEvent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scene_events.SceneEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.scene_events.SceneEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scene_events.SceneEvent} msg The msg instance to transform.
 * @return {!Object}
 */
proto.scene_events.SceneEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sceneId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    upVersion: jspb.Message.getFieldWithDefault(msg, 3, 0),
    downVersion: jspb.Message.getFieldWithDefault(msg, 4, 0),
    upChangeData: msg.getUpChangeData_asB64(),
    downChangeData: msg.getDownChangeData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scene_events.SceneEvent}
 */
proto.scene_events.SceneEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scene_events.SceneEvent;
  return proto.scene_events.SceneEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scene_events.SceneEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scene_events.SceneEvent}
 */
proto.scene_events.SceneEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSceneId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUpVersion(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDownVersion(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUpChangeData(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDownChangeData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.scene_events.SceneEvent} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.scene_events.SceneEvent.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scene_events.SceneEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.scene_events.SceneEvent.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getSceneId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getUpVersion();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = this.getDownVersion();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = this.getUpChangeData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = this.getDownChangeData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.scene_events.SceneEvent.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.scene_events.SceneEvent.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string scene_id = 2;
 * @return {string}
 */
proto.scene_events.SceneEvent.prototype.getSceneId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.scene_events.SceneEvent.prototype.setSceneId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 up_version = 3;
 * @return {number}
 */
proto.scene_events.SceneEvent.prototype.getUpVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.scene_events.SceneEvent.prototype.setUpVersion = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 down_version = 4;
 * @return {number}
 */
proto.scene_events.SceneEvent.prototype.getDownVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.scene_events.SceneEvent.prototype.setDownVersion = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional bytes up_change_data = 5;
 * @return {!(string|Uint8Array)}
 */
proto.scene_events.SceneEvent.prototype.getUpChangeData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes up_change_data = 5;
 * This is a type-conversion wrapper around `getUpChangeData()`
 * @return {string}
 */
proto.scene_events.SceneEvent.prototype.getUpChangeData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUpChangeData()));
};


/**
 * optional bytes up_change_data = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUpChangeData()`
 * @return {!Uint8Array}
 */
proto.scene_events.SceneEvent.prototype.getUpChangeData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUpChangeData()));
};


/** @param {!(string|Uint8Array)} value */
proto.scene_events.SceneEvent.prototype.setUpChangeData = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional bytes down_change_data = 6;
 * @return {!(string|Uint8Array)}
 */
proto.scene_events.SceneEvent.prototype.getDownChangeData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes down_change_data = 6;
 * This is a type-conversion wrapper around `getDownChangeData()`
 * @return {string}
 */
proto.scene_events.SceneEvent.prototype.getDownChangeData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDownChangeData()));
};


/**
 * optional bytes down_change_data = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDownChangeData()`
 * @return {!Uint8Array}
 */
proto.scene_events.SceneEvent.prototype.getDownChangeData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDownChangeData()));
};


/** @param {!(string|Uint8Array)} value */
proto.scene_events.SceneEvent.prototype.setDownChangeData = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scene_events.ListSceneEventsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scene_events.ListSceneEventsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scene_events.ListSceneEventsRequest.displayName = 'proto.scene_events.ListSceneEventsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scene_events.ListSceneEventsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.scene_events.ListSceneEventsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scene_events.ListSceneEventsRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.scene_events.ListSceneEventsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    pageSize: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pageToken: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scene_events.ListSceneEventsRequest}
 */
proto.scene_events.ListSceneEventsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scene_events.ListSceneEventsRequest;
  return proto.scene_events.ListSceneEventsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scene_events.ListSceneEventsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scene_events.ListSceneEventsRequest}
 */
proto.scene_events.ListSceneEventsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPageSize(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPageToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.scene_events.ListSceneEventsRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.scene_events.ListSceneEventsRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scene_events.ListSceneEventsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.scene_events.ListSceneEventsRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPageSize();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getPageToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 page_size = 1;
 * @return {number}
 */
proto.scene_events.ListSceneEventsRequest.prototype.getPageSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.scene_events.ListSceneEventsRequest.prototype.setPageSize = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string page_token = 2;
 * @return {string}
 */
proto.scene_events.ListSceneEventsRequest.prototype.getPageToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.scene_events.ListSceneEventsRequest.prototype.setPageToken = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scene_events.ListSceneEventsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.scene_events.ListSceneEventsResponse.repeatedFields_, null);
};
goog.inherits(proto.scene_events.ListSceneEventsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scene_events.ListSceneEventsResponse.displayName = 'proto.scene_events.ListSceneEventsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.scene_events.ListSceneEventsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scene_events.ListSceneEventsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.scene_events.ListSceneEventsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scene_events.ListSceneEventsResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.scene_events.ListSceneEventsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    sceneEventsList: jspb.Message.toObjectList(msg.getSceneEventsList(),
    proto.scene_events.SceneEvent.toObject, includeInstance),
    nextPageToken: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scene_events.ListSceneEventsResponse}
 */
proto.scene_events.ListSceneEventsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scene_events.ListSceneEventsResponse;
  return proto.scene_events.ListSceneEventsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scene_events.ListSceneEventsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scene_events.ListSceneEventsResponse}
 */
proto.scene_events.ListSceneEventsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.scene_events.SceneEvent;
      reader.readMessage(value,proto.scene_events.SceneEvent.deserializeBinaryFromReader);
      msg.addSceneEvents(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextPageToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.scene_events.ListSceneEventsResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.scene_events.ListSceneEventsResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scene_events.ListSceneEventsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.scene_events.ListSceneEventsResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSceneEventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.scene_events.SceneEvent.serializeBinaryToWriter
    );
  }
  f = this.getNextPageToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * repeated SceneEvent scene_events = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.scene_events.SceneEvent>}
 */
proto.scene_events.ListSceneEventsResponse.prototype.getSceneEventsList = function() {
  return /** @type{!Array.<!proto.scene_events.SceneEvent>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.scene_events.SceneEvent, 1));
};


/** @param {!Array.<!proto.scene_events.SceneEvent>} value */
proto.scene_events.ListSceneEventsResponse.prototype.setSceneEventsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.scene_events.SceneEvent=} opt_value
 * @param {number=} opt_index
 * @return {!proto.scene_events.SceneEvent}
 */
proto.scene_events.ListSceneEventsResponse.prototype.addSceneEvents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.scene_events.SceneEvent, opt_index);
};


proto.scene_events.ListSceneEventsResponse.prototype.clearSceneEventsList = function() {
  this.setSceneEventsList([]);
};


/**
 * optional string next_page_token = 2;
 * @return {string}
 */
proto.scene_events.ListSceneEventsResponse.prototype.getNextPageToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.scene_events.ListSceneEventsResponse.prototype.setNextPageToken = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scene_events.GetSceneEventRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scene_events.GetSceneEventRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scene_events.GetSceneEventRequest.displayName = 'proto.scene_events.GetSceneEventRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scene_events.GetSceneEventRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.scene_events.GetSceneEventRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scene_events.GetSceneEventRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.scene_events.GetSceneEventRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scene_events.GetSceneEventRequest}
 */
proto.scene_events.GetSceneEventRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scene_events.GetSceneEventRequest;
  return proto.scene_events.GetSceneEventRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scene_events.GetSceneEventRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scene_events.GetSceneEventRequest}
 */
proto.scene_events.GetSceneEventRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.scene_events.GetSceneEventRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.scene_events.GetSceneEventRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scene_events.GetSceneEventRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.scene_events.GetSceneEventRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.scene_events.GetSceneEventRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.scene_events.GetSceneEventRequest.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scene_events.CreateSceneEventRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scene_events.CreateSceneEventRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.scene_events.CreateSceneEventRequest.displayName = 'proto.scene_events.CreateSceneEventRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scene_events.CreateSceneEventRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.scene_events.CreateSceneEventRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scene_events.CreateSceneEventRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.scene_events.CreateSceneEventRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sceneEvent: (f = msg.getSceneEvent()) && proto.scene_events.SceneEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scene_events.CreateSceneEventRequest}
 */
proto.scene_events.CreateSceneEventRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scene_events.CreateSceneEventRequest;
  return proto.scene_events.CreateSceneEventRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scene_events.CreateSceneEventRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scene_events.CreateSceneEventRequest}
 */
proto.scene_events.CreateSceneEventRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.scene_events.SceneEvent;
      reader.readMessage(value,proto.scene_events.SceneEvent.deserializeBinaryFromReader);
      msg.setSceneEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.scene_events.CreateSceneEventRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.scene_events.CreateSceneEventRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scene_events.CreateSceneEventRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.scene_events.CreateSceneEventRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSceneEvent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.scene_events.SceneEvent.serializeBinaryToWriter
    );
  }
};


/**
 * optional SceneEvent scene_event = 1;
 * @return {?proto.scene_events.SceneEvent}
 */
proto.scene_events.CreateSceneEventRequest.prototype.getSceneEvent = function() {
  return /** @type{?proto.scene_events.SceneEvent} */ (
    jspb.Message.getWrapperField(this, proto.scene_events.SceneEvent, 1));
};


/** @param {?proto.scene_events.SceneEvent|undefined} value */
proto.scene_events.CreateSceneEventRequest.prototype.setSceneEvent = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.scene_events.CreateSceneEventRequest.prototype.clearSceneEvent = function() {
  this.setSceneEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.scene_events.CreateSceneEventRequest.prototype.hasSceneEvent = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.scene_events);
