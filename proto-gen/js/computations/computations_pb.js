/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var geometry_geometry_pb = require('../geometry/geometry_pb.js');
var scenes_scenes_pb = require('../scenes/scenes_pb.js');
goog.exportSymbol('proto.computations.Computation', null, global);
goog.exportSymbol('proto.computations.ComputationStatus', null, global);
goog.exportSymbol('proto.computations.CreateComputationRequest', null, global);
goog.exportSymbol('proto.computations.GetComputationStatusRequest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.computations.Computation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.computations.Computation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.computations.Computation.displayName = 'proto.computations.Computation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.computations.Computation.prototype.toObject = function(opt_includeInstance) {
  return proto.computations.Computation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.computations.Computation} msg The msg instance to transform.
 * @return {!Object}
 */
proto.computations.Computation.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    scene: (f = msg.getScene()) && scenes_scenes_pb.Scene.toObject(includeInstance, f),
    operatorId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    time: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    boundingBox: (f = msg.getBoundingBox()) && geometry_geometry_pb.BoundingBox2D.toObject(includeInstance, f),
    resourceId: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.computations.Computation}
 */
proto.computations.Computation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.computations.Computation;
  return proto.computations.Computation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.computations.Computation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.computations.Computation}
 */
proto.computations.Computation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new scenes_scenes_pb.Scene;
      reader.readMessage(value,scenes_scenes_pb.Scene.deserializeBinaryFromReader);
      msg.setScene(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOperatorId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTime(value);
      break;
    case 5:
      var value = new geometry_geometry_pb.BoundingBox2D;
      reader.readMessage(value,geometry_geometry_pb.BoundingBox2D.deserializeBinaryFromReader);
      msg.setBoundingBox(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setResourceId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.computations.Computation} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.computations.Computation.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.computations.Computation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.computations.Computation.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getScene();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      scenes_scenes_pb.Scene.serializeBinaryToWriter
    );
  }
  f = this.getOperatorId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getTime();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = this.getBoundingBox();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      geometry_geometry_pb.BoundingBox2D.serializeBinaryToWriter
    );
  }
  f = this.getResourceId();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.computations.Computation.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.computations.Computation.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional scenes.Scene scene = 2;
 * @return {?proto.scenes.Scene}
 */
proto.computations.Computation.prototype.getScene = function() {
  return /** @type{?proto.scenes.Scene} */ (
    jspb.Message.getWrapperField(this, scenes_scenes_pb.Scene, 2));
};


/** @param {?proto.scenes.Scene|undefined} value */
proto.computations.Computation.prototype.setScene = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.computations.Computation.prototype.clearScene = function() {
  this.setScene(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.computations.Computation.prototype.hasScene = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string operator_id = 3;
 * @return {string}
 */
proto.computations.Computation.prototype.getOperatorId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.computations.Computation.prototype.setOperatorId = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional double time = 4;
 * @return {number}
 */
proto.computations.Computation.prototype.getTime = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.computations.Computation.prototype.setTime = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional geometry.BoundingBox2D bounding_box = 5;
 * @return {?proto.geometry.BoundingBox2D}
 */
proto.computations.Computation.prototype.getBoundingBox = function() {
  return /** @type{?proto.geometry.BoundingBox2D} */ (
    jspb.Message.getWrapperField(this, geometry_geometry_pb.BoundingBox2D, 5));
};


/** @param {?proto.geometry.BoundingBox2D|undefined} value */
proto.computations.Computation.prototype.setBoundingBox = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.computations.Computation.prototype.clearBoundingBox = function() {
  this.setBoundingBox(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.computations.Computation.prototype.hasBoundingBox = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string resource_id = 6;
 * @return {string}
 */
proto.computations.Computation.prototype.getResourceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.computations.Computation.prototype.setResourceId = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.computations.ComputationStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.computations.ComputationStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.computations.ComputationStatus.displayName = 'proto.computations.ComputationStatus';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.computations.ComputationStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.computations.ComputationStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.computations.ComputationStatus} msg The msg instance to transform.
 * @return {!Object}
 */
proto.computations.ComputationStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    computationId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    status: jspb.Message.getFieldWithDefault(msg, 3, 0),
    createdAt: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.computations.ComputationStatus}
 */
proto.computations.ComputationStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.computations.ComputationStatus;
  return proto.computations.ComputationStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.computations.ComputationStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.computations.ComputationStatus}
 */
proto.computations.ComputationStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setComputationId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.computations.ComputationStatus} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.computations.ComputationStatus.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.computations.ComputationStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.computations.ComputationStatus.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getComputationId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getStatus();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = this.getCreatedAt();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.computations.ComputationStatus.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.computations.ComputationStatus.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string computation_id = 2;
 * @return {string}
 */
proto.computations.ComputationStatus.prototype.getComputationId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.computations.ComputationStatus.prototype.setComputationId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 status = 3;
 * @return {number}
 */
proto.computations.ComputationStatus.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.computations.ComputationStatus.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int64 created_at = 4;
 * @return {number}
 */
proto.computations.ComputationStatus.prototype.getCreatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.computations.ComputationStatus.prototype.setCreatedAt = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.computations.CreateComputationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.computations.CreateComputationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.computations.CreateComputationRequest.displayName = 'proto.computations.CreateComputationRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.computations.CreateComputationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.computations.CreateComputationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.computations.CreateComputationRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.computations.CreateComputationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    computation: (f = msg.getComputation()) && proto.computations.Computation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.computations.CreateComputationRequest}
 */
proto.computations.CreateComputationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.computations.CreateComputationRequest;
  return proto.computations.CreateComputationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.computations.CreateComputationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.computations.CreateComputationRequest}
 */
proto.computations.CreateComputationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.computations.Computation;
      reader.readMessage(value,proto.computations.Computation.deserializeBinaryFromReader);
      msg.setComputation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.computations.CreateComputationRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.computations.CreateComputationRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.computations.CreateComputationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.computations.CreateComputationRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getComputation();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.computations.Computation.serializeBinaryToWriter
    );
  }
};


/**
 * optional Computation computation = 1;
 * @return {?proto.computations.Computation}
 */
proto.computations.CreateComputationRequest.prototype.getComputation = function() {
  return /** @type{?proto.computations.Computation} */ (
    jspb.Message.getWrapperField(this, proto.computations.Computation, 1));
};


/** @param {?proto.computations.Computation|undefined} value */
proto.computations.CreateComputationRequest.prototype.setComputation = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.computations.CreateComputationRequest.prototype.clearComputation = function() {
  this.setComputation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.computations.CreateComputationRequest.prototype.hasComputation = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.computations.GetComputationStatusRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.computations.GetComputationStatusRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.computations.GetComputationStatusRequest.displayName = 'proto.computations.GetComputationStatusRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.computations.GetComputationStatusRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.computations.GetComputationStatusRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.computations.GetComputationStatusRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.computations.GetComputationStatusRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    computationId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.computations.GetComputationStatusRequest}
 */
proto.computations.GetComputationStatusRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.computations.GetComputationStatusRequest;
  return proto.computations.GetComputationStatusRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.computations.GetComputationStatusRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.computations.GetComputationStatusRequest}
 */
proto.computations.GetComputationStatusRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setComputationId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.computations.GetComputationStatusRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.computations.GetComputationStatusRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.computations.GetComputationStatusRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.computations.GetComputationStatusRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getComputationId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string computation_id = 1;
 * @return {string}
 */
proto.computations.GetComputationStatusRequest.prototype.getComputationId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.computations.GetComputationStatusRequest.prototype.setComputationId = function(value) {
  jspb.Message.setField(this, 1, value);
};


goog.object.extend(exports, proto.computations);
