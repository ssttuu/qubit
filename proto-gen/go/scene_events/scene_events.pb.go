// Code generated by protoc-gen-go. DO NOT EDIT.
// source: scene_events/scene_events.proto

/*
Package scene_events is a generated protocol buffer package.

It is generated from these files:
	scene_events/scene_events.proto

It has these top-level messages:
	SceneEvent
	ListSceneEventsRequest
	ListSceneEventsResponse
	GetSceneEventRequest
	CreateSceneEventRequest
*/
package scene_events

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SceneEvent struct {
	Id             string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	SceneId        string `protobuf:"bytes,2,opt,name=scene_id,json=sceneId" json:"scene_id,omitempty"`
	UpVersion      int32  `protobuf:"varint,3,opt,name=up_version,json=upVersion" json:"up_version,omitempty"`
	DownVersion    int32  `protobuf:"varint,4,opt,name=down_version,json=downVersion" json:"down_version,omitempty"`
	UpChangeData   []byte `protobuf:"bytes,5,opt,name=up_change_data,json=upChangeData,proto3" json:"up_change_data,omitempty"`
	DownChangeData []byte `protobuf:"bytes,6,opt,name=down_change_data,json=downChangeData,proto3" json:"down_change_data,omitempty"`
}

func (m *SceneEvent) Reset()                    { *m = SceneEvent{} }
func (m *SceneEvent) String() string            { return proto.CompactTextString(m) }
func (*SceneEvent) ProtoMessage()               {}
func (*SceneEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SceneEvent) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SceneEvent) GetSceneId() string {
	if m != nil {
		return m.SceneId
	}
	return ""
}

func (m *SceneEvent) GetUpVersion() int32 {
	if m != nil {
		return m.UpVersion
	}
	return 0
}

func (m *SceneEvent) GetDownVersion() int32 {
	if m != nil {
		return m.DownVersion
	}
	return 0
}

func (m *SceneEvent) GetUpChangeData() []byte {
	if m != nil {
		return m.UpChangeData
	}
	return nil
}

func (m *SceneEvent) GetDownChangeData() []byte {
	if m != nil {
		return m.DownChangeData
	}
	return nil
}

type ListSceneEventsRequest struct {
	PageSize  int32  `protobuf:"varint,1,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken" json:"page_token,omitempty"`
}

func (m *ListSceneEventsRequest) Reset()                    { *m = ListSceneEventsRequest{} }
func (m *ListSceneEventsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListSceneEventsRequest) ProtoMessage()               {}
func (*ListSceneEventsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ListSceneEventsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListSceneEventsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

type ListSceneEventsResponse struct {
	SceneEvents   []*SceneEvent `protobuf:"bytes,1,rep,name=scene_events,json=sceneEvents" json:"scene_events,omitempty"`
	NextPageToken string        `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken" json:"next_page_token,omitempty"`
}

func (m *ListSceneEventsResponse) Reset()                    { *m = ListSceneEventsResponse{} }
func (m *ListSceneEventsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListSceneEventsResponse) ProtoMessage()               {}
func (*ListSceneEventsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ListSceneEventsResponse) GetSceneEvents() []*SceneEvent {
	if m != nil {
		return m.SceneEvents
	}
	return nil
}

func (m *ListSceneEventsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type GetSceneEventRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetSceneEventRequest) Reset()                    { *m = GetSceneEventRequest{} }
func (m *GetSceneEventRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSceneEventRequest) ProtoMessage()               {}
func (*GetSceneEventRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetSceneEventRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type CreateSceneEventRequest struct {
	SceneEvent *SceneEvent `protobuf:"bytes,1,opt,name=scene_event,json=sceneEvent" json:"scene_event,omitempty"`
}

func (m *CreateSceneEventRequest) Reset()                    { *m = CreateSceneEventRequest{} }
func (m *CreateSceneEventRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateSceneEventRequest) ProtoMessage()               {}
func (*CreateSceneEventRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CreateSceneEventRequest) GetSceneEvent() *SceneEvent {
	if m != nil {
		return m.SceneEvent
	}
	return nil
}

func init() {
	proto.RegisterType((*SceneEvent)(nil), "scene_events.SceneEvent")
	proto.RegisterType((*ListSceneEventsRequest)(nil), "scene_events.ListSceneEventsRequest")
	proto.RegisterType((*ListSceneEventsResponse)(nil), "scene_events.ListSceneEventsResponse")
	proto.RegisterType((*GetSceneEventRequest)(nil), "scene_events.GetSceneEventRequest")
	proto.RegisterType((*CreateSceneEventRequest)(nil), "scene_events.CreateSceneEventRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SceneEvents service

type SceneEventsClient interface {
	List(ctx context.Context, in *ListSceneEventsRequest, opts ...grpc.CallOption) (*ListSceneEventsResponse, error)
	Get(ctx context.Context, in *GetSceneEventRequest, opts ...grpc.CallOption) (*SceneEvent, error)
	Create(ctx context.Context, in *CreateSceneEventRequest, opts ...grpc.CallOption) (*SceneEvent, error)
}

type sceneEventsClient struct {
	cc *grpc.ClientConn
}

func NewSceneEventsClient(cc *grpc.ClientConn) SceneEventsClient {
	return &sceneEventsClient{cc}
}

func (c *sceneEventsClient) List(ctx context.Context, in *ListSceneEventsRequest, opts ...grpc.CallOption) (*ListSceneEventsResponse, error) {
	out := new(ListSceneEventsResponse)
	err := grpc.Invoke(ctx, "/scene_events.SceneEvents/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sceneEventsClient) Get(ctx context.Context, in *GetSceneEventRequest, opts ...grpc.CallOption) (*SceneEvent, error) {
	out := new(SceneEvent)
	err := grpc.Invoke(ctx, "/scene_events.SceneEvents/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sceneEventsClient) Create(ctx context.Context, in *CreateSceneEventRequest, opts ...grpc.CallOption) (*SceneEvent, error) {
	out := new(SceneEvent)
	err := grpc.Invoke(ctx, "/scene_events.SceneEvents/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SceneEvents service

type SceneEventsServer interface {
	List(context.Context, *ListSceneEventsRequest) (*ListSceneEventsResponse, error)
	Get(context.Context, *GetSceneEventRequest) (*SceneEvent, error)
	Create(context.Context, *CreateSceneEventRequest) (*SceneEvent, error)
}

func RegisterSceneEventsServer(s *grpc.Server, srv SceneEventsServer) {
	s.RegisterService(&_SceneEvents_serviceDesc, srv)
}

func _SceneEvents_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSceneEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SceneEventsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scene_events.SceneEvents/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SceneEventsServer).List(ctx, req.(*ListSceneEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SceneEvents_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSceneEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SceneEventsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scene_events.SceneEvents/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SceneEventsServer).Get(ctx, req.(*GetSceneEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SceneEvents_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSceneEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SceneEventsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scene_events.SceneEvents/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SceneEventsServer).Create(ctx, req.(*CreateSceneEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SceneEvents_serviceDesc = grpc.ServiceDesc{
	ServiceName: "scene_events.SceneEvents",
	HandlerType: (*SceneEventsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _SceneEvents_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _SceneEvents_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _SceneEvents_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scene_events/scene_events.proto",
}

func init() { proto.RegisterFile("scene_events/scene_events.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 440 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x53, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x55, 0x9c, 0x26, 0x34, 0x63, 0x13, 0xaa, 0x11, 0x10, 0x13, 0xa8, 0x0a, 0x56, 0x5b, 0xe5,
	0x54, 0x8b, 0x72, 0x02, 0x8e, 0x05, 0x21, 0x24, 0x0e, 0xc8, 0xad, 0xb8, 0x5a, 0xdb, 0x7a, 0x14,
	0x2c, 0x60, 0x77, 0xc9, 0xae, 0x03, 0x02, 0xc1, 0x81, 0x5f, 0xe0, 0xab, 0xb8, 0xc2, 0x2f, 0xf0,
	0x21, 0xec, 0xae, 0xdb, 0xd8, 0x8e, 0x93, 0x70, 0xcb, 0xbc, 0x7d, 0xf3, 0x66, 0xde, 0x9b, 0x18,
	0xf6, 0xd4, 0x05, 0x71, 0x4a, 0x69, 0x4e, 0x5c, 0xab, 0xb8, 0x5e, 0x1c, 0xc9, 0x99, 0xd0, 0x02,
	0x83, 0x3a, 0x36, 0xbe, 0x37, 0x15, 0x62, 0xfa, 0x9e, 0x62, 0x26, 0xf3, 0x98, 0x71, 0x2e, 0x34,
	0xd3, 0xb9, 0xe0, 0x97, 0xdc, 0xe8, 0x57, 0x07, 0xe0, 0xd4, 0xd2, 0x9f, 0x5b, 0x36, 0x0e, 0xc1,
	0xcb, 0xb3, 0xb0, 0x73, 0xbf, 0x33, 0x19, 0x24, 0xe6, 0x17, 0xde, 0x81, 0xed, 0x52, 0xcc, 0xa0,
	0x9e, 0x43, 0xaf, 0xb9, 0xfa, 0x65, 0x86, 0xbb, 0x00, 0x85, 0x4c, 0xe7, 0x34, 0x53, 0x46, 0x2e,
	0xec, 0x9a, 0xc7, 0x5e, 0x32, 0x28, 0xe4, 0x9b, 0x12, 0xc0, 0x07, 0x10, 0x64, 0xe2, 0x13, 0x5f,
	0x10, 0xb6, 0x1c, 0xc1, 0xb7, 0xd8, 0x15, 0x65, 0x1f, 0x86, 0x46, 0xe1, 0xe2, 0x2d, 0xe3, 0x53,
	0x4a, 0x33, 0xa6, 0x59, 0xd8, 0x33, 0xa4, 0x20, 0x09, 0x0a, 0x79, 0xe2, 0xc0, 0x67, 0x06, 0xc3,
	0x09, 0xec, 0x38, 0xa1, 0x3a, 0xaf, 0xef, 0x78, 0x43, 0x8b, 0x57, 0xcc, 0xe8, 0x0c, 0x6e, 0xbf,
	0xca, 0x95, 0xae, 0xec, 0xa8, 0x84, 0x3e, 0x16, 0xa4, 0x34, 0xde, 0x85, 0x81, 0x64, 0xa6, 0x59,
	0xe5, 0x5f, 0xc8, 0xb9, 0xeb, 0x25, 0xdb, 0x16, 0x38, 0x35, 0xb5, 0x35, 0xe2, 0x1e, 0xb5, 0x78,
	0x47, 0xfc, 0xd2, 0xa5, 0xa3, 0x9f, 0x59, 0x20, 0xfa, 0x0e, 0xa3, 0x96, 0xaa, 0x92, 0x26, 0x41,
	0xc2, 0xa7, 0xd0, 0x88, 0xda, 0x28, 0x77, 0x27, 0xfe, 0x71, 0x78, 0xd4, 0xb8, 0x49, 0xd5, 0x98,
	0xf8, 0xaa, 0x12, 0xc1, 0x43, 0xb8, 0xc1, 0xe9, 0xb3, 0x4e, 0x5b, 0xb3, 0xaf, 0x5b, 0xf8, 0xf5,
	0x62, 0xfe, 0x21, 0xdc, 0x7c, 0x41, 0xb5, 0xf1, 0x57, 0x9e, 0x96, 0x4e, 0x65, 0xdc, 0x8f, 0x4e,
	0x66, 0xc4, 0x34, 0xb5, 0xa9, 0x8f, 0xc1, 0xaf, 0xad, 0xe4, 0x7a, 0x36, 0xad, 0x09, 0xd5, 0x9a,
	0xc7, 0xbf, 0x3d, 0xf0, 0x6b, 0xd6, 0xf1, 0x03, 0x6c, 0xd9, 0x34, 0x70, 0xbf, 0xd9, 0xbd, 0x3a,
	0xf7, 0xf1, 0xc1, 0x7f, 0x58, 0x65, 0x8e, 0x51, 0xf8, 0xe3, 0xcf, 0xdf, 0x9f, 0x1e, 0xe2, 0x4e,
	0x3c, 0x7f, 0xd8, 0xf8, 0x43, 0xe3, 0x39, 0x74, 0x8d, 0x79, 0x8c, 0x9a, 0x3a, 0xab, 0xf2, 0x18,
	0xaf, 0xf5, 0x13, 0xed, 0x3a, 0xf9, 0x11, 0xde, 0x5a, 0x96, 0x8f, 0xbf, 0xe6, 0xd9, 0x37, 0x94,
	0xd0, 0x2f, 0x83, 0xc3, 0xa5, 0x75, 0xd7, 0xc4, 0xb9, 0x61, 0xd2, 0x81, 0x9b, 0xb4, 0x17, 0xb5,
	0x8c, 0x3c, 0xa9, 0x1f, 0xe0, 0xbc, 0xef, 0xbe, 0xbd, 0x47, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff,
	0x38, 0x98, 0x2a, 0x3e, 0xca, 0x03, 0x00, 0x00,
}
