// Code generated by protoc-gen-go. DO NOT EDIT.
// source: render_parameters/render_parameters.proto

/*
Package render_parameters is a generated protocol buffer package.

It is generated from these files:
	render_parameters/render_parameters.proto

It has these top-level messages:
	RenderParameterRequest
	RenderParameter
*/
package render_parameters

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RenderParameterRequest struct {
	OperatorKey string  `protobuf:"bytes,1,opt,name=operator_key,json=operatorKey" json:"operator_key,omitempty"`
	Time        float64 `protobuf:"fixed64,2,opt,name=time" json:"time,omitempty"`
}

func (m *RenderParameterRequest) Reset()                    { *m = RenderParameterRequest{} }
func (m *RenderParameterRequest) String() string            { return proto.CompactTextString(m) }
func (*RenderParameterRequest) ProtoMessage()               {}
func (*RenderParameterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RenderParameterRequest) GetOperatorKey() string {
	if m != nil {
		return m.OperatorKey
	}
	return ""
}

func (m *RenderParameterRequest) GetTime() float64 {
	if m != nil {
		return m.Time
	}
	return 0
}

type RenderParameter struct {
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// JSON field that varies by parameter type
	Configuration []byte             `protobuf:"bytes,2,opt,name=configuration,proto3" json:"configuration,omitempty"`
	Inputs        []*RenderParameter `protobuf:"bytes,3,rep,name=inputs" json:"inputs,omitempty"`
}

func (m *RenderParameter) Reset()                    { *m = RenderParameter{} }
func (m *RenderParameter) String() string            { return proto.CompactTextString(m) }
func (*RenderParameter) ProtoMessage()               {}
func (*RenderParameter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RenderParameter) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *RenderParameter) GetConfiguration() []byte {
	if m != nil {
		return m.Configuration
	}
	return nil
}

func (m *RenderParameter) GetInputs() []*RenderParameter {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func init() {
	proto.RegisterType((*RenderParameterRequest)(nil), "render_parameters.RenderParameterRequest")
	proto.RegisterType((*RenderParameter)(nil), "render_parameters.RenderParameter")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RenderParameters service

type RenderParametersClient interface {
	GetRenderParameters(ctx context.Context, in *RenderParameterRequest, opts ...grpc.CallOption) (*RenderParameter, error)
}

type renderParametersClient struct {
	cc *grpc.ClientConn
}

func NewRenderParametersClient(cc *grpc.ClientConn) RenderParametersClient {
	return &renderParametersClient{cc}
}

func (c *renderParametersClient) GetRenderParameters(ctx context.Context, in *RenderParameterRequest, opts ...grpc.CallOption) (*RenderParameter, error) {
	out := new(RenderParameter)
	err := grpc.Invoke(ctx, "/render_parameters.RenderParameters/GetRenderParameters", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RenderParameters service

type RenderParametersServer interface {
	GetRenderParameters(context.Context, *RenderParameterRequest) (*RenderParameter, error)
}

func RegisterRenderParametersServer(s *grpc.Server, srv RenderParametersServer) {
	s.RegisterService(&_RenderParameters_serviceDesc, srv)
}

func _RenderParameters_GetRenderParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderParameterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RenderParametersServer).GetRenderParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/render_parameters.RenderParameters/GetRenderParameters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RenderParametersServer).GetRenderParameters(ctx, req.(*RenderParameterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RenderParameters_serviceDesc = grpc.ServiceDesc{
	ServiceName: "render_parameters.RenderParameters",
	HandlerType: (*RenderParametersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRenderParameters",
			Handler:    _RenderParameters_GetRenderParameters_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "render_parameters/render_parameters.proto",
}

func init() { proto.RegisterFile("render_parameters/render_parameters.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 237 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x90, 0xb1, 0x4e, 0x03, 0x31,
	0x10, 0x44, 0x39, 0x82, 0x22, 0xb1, 0x09, 0x02, 0x8c, 0x84, 0x4e, 0x11, 0x45, 0xb0, 0x28, 0x92,
	0x26, 0x27, 0x85, 0x8e, 0x1f, 0xa0, 0xa0, 0x00, 0xf9, 0x07, 0x22, 0x03, 0x9b, 0x93, 0x05, 0xf1,
	0x9a, 0xf5, 0x5e, 0x71, 0xfc, 0x00, 0xbf, 0x0d, 0x32, 0x97, 0x22, 0xe7, 0xe6, 0xba, 0xd5, 0x8c,
	0xe7, 0x69, 0x3c, 0xb0, 0x64, 0xf4, 0xef, 0xc8, 0x9b, 0x60, 0xd9, 0xee, 0x50, 0x90, 0x63, 0x95,
	0x29, 0xab, 0xc0, 0x24, 0xa4, 0x2e, 0x33, 0x63, 0x76, 0x53, 0x13, 0xd5, 0x9f, 0x58, 0xd9, 0xe0,
	0x2a, 0xeb, 0x3d, 0x89, 0x15, 0x47, 0xbe, 0x0b, 0xe8, 0x67, 0xb8, 0x36, 0x29, 0xf2, 0xb2, 0x4f,
	0x18, 0xfc, 0x6a, 0x30, 0x8a, 0xba, 0x85, 0x29, 0x05, 0x64, 0x2b, 0xc4, 0x9b, 0x0f, 0x6c, 0xcb,
	0x62, 0x5e, 0x2c, 0x4e, 0xcd, 0x64, 0xaf, 0x3d, 0x61, 0xab, 0x14, 0x9c, 0x88, 0xdb, 0x61, 0x79,
	0xfc, 0x67, 0x15, 0x26, 0xdd, 0xfa, 0xa7, 0x80, 0xf3, 0x1e, 0x31, 0xbd, 0x6b, 0x03, 0x76, 0x88,
	0x74, 0xab, 0x3b, 0x38, 0x7b, 0x23, 0xbf, 0x75, 0x75, 0xc3, 0xa9, 0x50, 0x82, 0x4c, 0xcd, 0xa1,
	0xa8, 0x1e, 0x60, 0xec, 0x7c, 0x68, 0x24, 0x96, 0xa3, 0xf9, 0x68, 0x31, 0x59, 0xeb, 0x55, 0xfe,
	0xf3, 0x7e, 0xff, 0x2e, 0xb1, 0xfe, 0x86, 0x8b, 0x9e, 0x15, 0xd5, 0x16, 0xae, 0x1e, 0x51, 0x32,
	0x79, 0x39, 0x00, 0xfb, 0x3f, 0xcb, 0x6c, 0x40, 0x03, 0x7d, 0xf4, 0x3a, 0x4e, 0xeb, 0xde, 0xff,
	0x06, 0x00, 0x00, 0xff, 0xff, 0x19, 0x91, 0xe3, 0x0d, 0xbb, 0x01, 0x00, 0x00,
}
