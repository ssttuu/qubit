// Code generated by protoc-gen-go. DO NOT EDIT.
// source: scenes.proto

/*
Package scenes is a generated protocol buffer package.

It is generated from these files:
	scenes.proto

It has these top-level messages:
	Scene
	ListScenesRequest
	ListScenesResponse
	GetSceneRequest
	CreateSceneRequest
	UpdateSceneRequest
	DeleteSceneRequest
*/
package scenes

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Scene struct {
	Id   string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *Scene) Reset()                    { *m = Scene{} }
func (m *Scene) String() string            { return proto.CompactTextString(m) }
func (*Scene) ProtoMessage()               {}
func (*Scene) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Scene) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Scene) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ListScenesRequest struct {
	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId" json:"organization_id,omitempty"`
	PageSize       int32  `protobuf:"varint,2,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	PageToken      string `protobuf:"bytes,3,opt,name=page_token,json=pageToken" json:"page_token,omitempty"`
}

func (m *ListScenesRequest) Reset()                    { *m = ListScenesRequest{} }
func (m *ListScenesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListScenesRequest) ProtoMessage()               {}
func (*ListScenesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ListScenesRequest) GetOrganizationId() string {
	if m != nil {
		return m.OrganizationId
	}
	return ""
}

func (m *ListScenesRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListScenesRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

type ListScenesResponse struct {
	Scenes        []*Scene `protobuf:"bytes,1,rep,name=scenes" json:"scenes,omitempty"`
	NextPageToken string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken" json:"next_page_token,omitempty"`
}

func (m *ListScenesResponse) Reset()                    { *m = ListScenesResponse{} }
func (m *ListScenesResponse) String() string            { return proto.CompactTextString(m) }
func (*ListScenesResponse) ProtoMessage()               {}
func (*ListScenesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ListScenesResponse) GetScenes() []*Scene {
	if m != nil {
		return m.Scenes
	}
	return nil
}

func (m *ListScenesResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type GetSceneRequest struct {
	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId" json:"organization_id,omitempty"`
	SceneId        string `protobuf:"bytes,2,opt,name=scene_id,json=sceneId" json:"scene_id,omitempty"`
}

func (m *GetSceneRequest) Reset()                    { *m = GetSceneRequest{} }
func (m *GetSceneRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSceneRequest) ProtoMessage()               {}
func (*GetSceneRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetSceneRequest) GetOrganizationId() string {
	if m != nil {
		return m.OrganizationId
	}
	return ""
}

func (m *GetSceneRequest) GetSceneId() string {
	if m != nil {
		return m.SceneId
	}
	return ""
}

type CreateSceneRequest struct {
	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId" json:"organization_id,omitempty"`
	Scene          *Scene `protobuf:"bytes,2,opt,name=scene" json:"scene,omitempty"`
}

func (m *CreateSceneRequest) Reset()                    { *m = CreateSceneRequest{} }
func (m *CreateSceneRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateSceneRequest) ProtoMessage()               {}
func (*CreateSceneRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CreateSceneRequest) GetOrganizationId() string {
	if m != nil {
		return m.OrganizationId
	}
	return ""
}

func (m *CreateSceneRequest) GetScene() *Scene {
	if m != nil {
		return m.Scene
	}
	return nil
}

type UpdateSceneRequest struct {
	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId" json:"organization_id,omitempty"`
	SceneId        string `protobuf:"bytes,2,opt,name=scene_id,json=sceneId" json:"scene_id,omitempty"`
	Scene          *Scene `protobuf:"bytes,3,opt,name=scene" json:"scene,omitempty"`
}

func (m *UpdateSceneRequest) Reset()                    { *m = UpdateSceneRequest{} }
func (m *UpdateSceneRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateSceneRequest) ProtoMessage()               {}
func (*UpdateSceneRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *UpdateSceneRequest) GetOrganizationId() string {
	if m != nil {
		return m.OrganizationId
	}
	return ""
}

func (m *UpdateSceneRequest) GetSceneId() string {
	if m != nil {
		return m.SceneId
	}
	return ""
}

func (m *UpdateSceneRequest) GetScene() *Scene {
	if m != nil {
		return m.Scene
	}
	return nil
}

type DeleteSceneRequest struct {
	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId" json:"organization_id,omitempty"`
	SceneId        string `protobuf:"bytes,2,opt,name=scene_id,json=sceneId" json:"scene_id,omitempty"`
}

func (m *DeleteSceneRequest) Reset()                    { *m = DeleteSceneRequest{} }
func (m *DeleteSceneRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteSceneRequest) ProtoMessage()               {}
func (*DeleteSceneRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *DeleteSceneRequest) GetOrganizationId() string {
	if m != nil {
		return m.OrganizationId
	}
	return ""
}

func (m *DeleteSceneRequest) GetSceneId() string {
	if m != nil {
		return m.SceneId
	}
	return ""
}

func init() {
	proto.RegisterType((*Scene)(nil), "scenes.Scene")
	proto.RegisterType((*ListScenesRequest)(nil), "scenes.ListScenesRequest")
	proto.RegisterType((*ListScenesResponse)(nil), "scenes.ListScenesResponse")
	proto.RegisterType((*GetSceneRequest)(nil), "scenes.GetSceneRequest")
	proto.RegisterType((*CreateSceneRequest)(nil), "scenes.CreateSceneRequest")
	proto.RegisterType((*UpdateSceneRequest)(nil), "scenes.UpdateSceneRequest")
	proto.RegisterType((*DeleteSceneRequest)(nil), "scenes.DeleteSceneRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Scenes service

type ScenesClient interface {
	List(ctx context.Context, in *ListScenesRequest, opts ...grpc.CallOption) (*ListScenesResponse, error)
	Get(ctx context.Context, in *GetSceneRequest, opts ...grpc.CallOption) (*Scene, error)
	Create(ctx context.Context, in *CreateSceneRequest, opts ...grpc.CallOption) (*Scene, error)
	Update(ctx context.Context, in *UpdateSceneRequest, opts ...grpc.CallOption) (*Scene, error)
	Delete(ctx context.Context, in *DeleteSceneRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type scenesClient struct {
	cc *grpc.ClientConn
}

func NewScenesClient(cc *grpc.ClientConn) ScenesClient {
	return &scenesClient{cc}
}

func (c *scenesClient) List(ctx context.Context, in *ListScenesRequest, opts ...grpc.CallOption) (*ListScenesResponse, error) {
	out := new(ListScenesResponse)
	err := grpc.Invoke(ctx, "/scenes.Scenes/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scenesClient) Get(ctx context.Context, in *GetSceneRequest, opts ...grpc.CallOption) (*Scene, error) {
	out := new(Scene)
	err := grpc.Invoke(ctx, "/scenes.Scenes/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scenesClient) Create(ctx context.Context, in *CreateSceneRequest, opts ...grpc.CallOption) (*Scene, error) {
	out := new(Scene)
	err := grpc.Invoke(ctx, "/scenes.Scenes/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scenesClient) Update(ctx context.Context, in *UpdateSceneRequest, opts ...grpc.CallOption) (*Scene, error) {
	out := new(Scene)
	err := grpc.Invoke(ctx, "/scenes.Scenes/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scenesClient) Delete(ctx context.Context, in *DeleteSceneRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/scenes.Scenes/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Scenes service

type ScenesServer interface {
	List(context.Context, *ListScenesRequest) (*ListScenesResponse, error)
	Get(context.Context, *GetSceneRequest) (*Scene, error)
	Create(context.Context, *CreateSceneRequest) (*Scene, error)
	Update(context.Context, *UpdateSceneRequest) (*Scene, error)
	Delete(context.Context, *DeleteSceneRequest) (*google_protobuf1.Empty, error)
}

func RegisterScenesServer(s *grpc.Server, srv ScenesServer) {
	s.RegisterService(&_Scenes_serviceDesc, srv)
}

func _Scenes_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListScenesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScenesServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scenes.Scenes/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScenesServer).List(ctx, req.(*ListScenesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scenes_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSceneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScenesServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scenes.Scenes/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScenesServer).Get(ctx, req.(*GetSceneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scenes_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSceneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScenesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scenes.Scenes/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScenesServer).Create(ctx, req.(*CreateSceneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scenes_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSceneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScenesServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scenes.Scenes/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScenesServer).Update(ctx, req.(*UpdateSceneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scenes_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSceneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScenesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scenes.Scenes/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScenesServer).Delete(ctx, req.(*DeleteSceneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Scenes_serviceDesc = grpc.ServiceDesc{
	ServiceName: "scenes.Scenes",
	HandlerType: (*ScenesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Scenes_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Scenes_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Scenes_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Scenes_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Scenes_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scenes.proto",
}

func init() { proto.RegisterFile("scenes.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 480 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x94, 0xdf, 0x6a, 0xd4, 0x40,
	0x14, 0xc6, 0xe9, 0xfe, 0x89, 0xed, 0xd1, 0x76, 0xf1, 0x5c, 0xe8, 0x36, 0x55, 0x90, 0x11, 0xb5,
	0x54, 0xc9, 0xe0, 0x16, 0x11, 0x05, 0xbd, 0xb1, 0x22, 0x05, 0x2f, 0x64, 0x6b, 0xc1, 0xbb, 0x25,
	0xdb, 0x3d, 0x2e, 0xc1, 0xed, 0x4c, 0xba, 0x33, 0x95, 0xb6, 0xcb, 0xde, 0xf8, 0x0a, 0x3e, 0x99,
	0xf8, 0x0a, 0x3e, 0x88, 0xc9, 0x99, 0x64, 0x37, 0x26, 0x2a, 0x36, 0x78, 0x97, 0x39, 0x67, 0xf2,
	0xfd, 0xce, 0x37, 0xf3, 0x31, 0x70, 0xcd, 0x1c, 0x91, 0x22, 0x13, 0xc4, 0x53, 0x6d, 0x35, 0x7a,
	0x6e, 0xe5, 0xdf, 0x1a, 0x6b, 0x3d, 0x9e, 0x90, 0x0c, 0xe3, 0x48, 0x86, 0x4a, 0x69, 0x1b, 0xda,
	0x48, 0xab, 0x6c, 0x97, 0xbf, 0x95, 0x75, 0x79, 0x35, 0x3c, 0xfd, 0x28, 0xe9, 0x38, 0xb6, 0xe7,
	0xae, 0x29, 0x1e, 0x42, 0xfb, 0x20, 0x15, 0xc1, 0x0d, 0x68, 0x44, 0xa3, 0xee, 0xca, 0x9d, 0x95,
	0xed, 0xb5, 0x7e, 0xf2, 0x85, 0x08, 0x2d, 0x15, 0x1e, 0x53, 0xb7, 0xc1, 0x15, 0xfe, 0x16, 0x67,
	0x70, 0xfd, 0x6d, 0x64, 0x2c, 0xff, 0x60, 0xfa, 0x74, 0x72, 0x4a, 0xc6, 0xe2, 0x03, 0xe8, 0xe8,
	0xe9, 0x38, 0x54, 0xd1, 0x05, 0x53, 0x07, 0x0b, 0x95, 0x8d, 0x62, 0x79, 0x7f, 0x84, 0x5b, 0xb0,
	0x16, 0x87, 0x63, 0x1a, 0x98, 0xe8, 0xc2, 0xc9, 0xb6, 0xfb, 0xab, 0x69, 0xe1, 0x20, 0x59, 0xe3,
	0x6d, 0x00, 0x6e, 0x5a, 0xfd, 0x89, 0x54, 0xb7, 0xc9, 0x02, 0xbc, 0xfd, 0x7d, 0x5a, 0x10, 0x47,
	0x80, 0x45, 0xb2, 0x89, 0x13, 0x7b, 0x84, 0xf7, 0x20, 0x3b, 0x81, 0x84, 0xd8, 0xdc, 0xbe, 0xda,
	0x5b, 0x0f, 0xb2, 0xe3, 0xe1, 0x7d, 0xfd, 0xac, 0x89, 0xf7, 0xa1, 0xa3, 0xe8, 0xcc, 0x0e, 0x0a,
	0x00, 0xe7, 0x6a, 0x3d, 0x2d, 0xbf, 0x5b, 0x40, 0x0e, 0xa1, 0xf3, 0x86, 0x1c, 0xe3, 0xd2, 0xe6,
	0x36, 0x61, 0x95, 0x69, 0xe9, 0x0e, 0x27, 0x7e, 0x85, 0xd7, 0xfb, 0x23, 0x31, 0x04, 0x7c, 0x35,
	0xa5, 0xd0, 0x52, 0x3d, 0xe5, 0xbb, 0xd0, 0x66, 0x25, 0x96, 0xad, 0x78, 0x74, 0x3d, 0x31, 0x07,
	0x3c, 0x8c, 0x47, 0xb5, 0x19, 0x7f, 0x9e, 0x7e, 0x89, 0x6f, 0xfe, 0x05, 0xff, 0x01, 0x70, 0x8f,
	0x26, 0xf4, 0xff, 0xf1, 0xbd, 0x6f, 0x2d, 0xf0, 0xdc, 0xad, 0xe3, 0x09, 0xb4, 0xd2, 0x0c, 0xe0,
	0x66, 0x3e, 0x42, 0x25, 0x8b, 0xbe, 0xff, 0xbb, 0x96, 0x0b, 0x8b, 0xe8, 0x7d, 0xf9, 0xfe, 0xe3,
	0x6b, 0xe3, 0x11, 0xee, 0xc8, 0xcf, 0x8f, 0x65, 0x71, 0x00, 0x23, 0x67, 0xa5, 0x31, 0xe7, 0x32,
	0x4b, 0xce, 0x04, 0x9a, 0x49, 0x22, 0xf0, 0x66, 0x2e, 0x5b, 0x8a, 0x87, 0xff, 0xeb, 0x69, 0x88,
	0x17, 0x8c, 0x78, 0x8a, 0x4f, 0xfe, 0x1d, 0x21, 0x67, 0xb9, 0xf3, 0x39, 0x2a, 0xf0, 0x5c, 0x50,
	0x70, 0xe1, 0xa3, 0x1a, 0x9c, 0x32, 0xf3, 0x19, 0x33, 0x77, 0xc5, 0x25, 0x6c, 0x3d, 0x77, 0xb7,
	0x86, 0xe7, 0xe0, 0xb9, 0xd0, 0x2c, 0x79, 0xd5, 0x10, 0x95, 0x79, 0x7b, 0xcc, 0x7b, 0xe9, 0xd7,
	0xf3, 0x98, 0xa3, 0x67, 0xe0, 0xb9, 0xc0, 0x2c, 0xd1, 0xd5, 0x00, 0xf9, 0x37, 0x02, 0xf7, 0x74,
	0x05, 0xf9, 0xd3, 0x15, 0xbc, 0x4e, 0x9f, 0xae, 0xfc, 0x9c, 0x77, 0xea, 0xcd, 0x30, 0xf4, 0x58,
	0x6e, 0xf7, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0xad, 0x56, 0xa9, 0xde, 0x4d, 0x05, 0x00, 0x00,
}
