// Code generated by protoc-gen-go. DO NOT EDIT.
// source: images.proto

/*
Package images is a generated protocol buffer package.

It is generated from these files:
	images.proto

It has these top-level messages:
	Frame
	Plane
	Channel
	Row
*/
package images

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Frame struct {
	Name   string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Width  int32             `protobuf:"varint,2,opt,name=width" json:"width,omitempty"`
	Height int32             `protobuf:"varint,3,opt,name=height" json:"height,omitempty"`
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Planes []*Plane          `protobuf:"bytes,5,rep,name=planes" json:"planes,omitempty"`
}

func (m *Frame) Reset()                    { *m = Frame{} }
func (m *Frame) String() string            { return proto.CompactTextString(m) }
func (*Frame) ProtoMessage()               {}
func (*Frame) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Frame) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Frame) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *Frame) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Frame) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Frame) GetPlanes() []*Plane {
	if m != nil {
		return m.Planes
	}
	return nil
}

type Plane struct {
	Name     string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Width    int32             `protobuf:"varint,2,opt,name=width" json:"width,omitempty"`
	Height   int32             `protobuf:"varint,3,opt,name=height" json:"height,omitempty"`
	Labels   map[string]string `protobuf:"bytes,4,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Channels []*Channel        `protobuf:"bytes,5,rep,name=channels" json:"channels,omitempty"`
}

func (m *Plane) Reset()                    { *m = Plane{} }
func (m *Plane) String() string            { return proto.CompactTextString(m) }
func (*Plane) ProtoMessage()               {}
func (*Plane) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Plane) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Plane) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *Plane) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Plane) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Plane) GetChannels() []*Channel {
	if m != nil {
		return m.Channels
	}
	return nil
}

type Channel struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Rows []*Row `protobuf:"bytes,2,rep,name=rows" json:"rows,omitempty"`
}

func (m *Channel) Reset()                    { *m = Channel{} }
func (m *Channel) String() string            { return proto.CompactTextString(m) }
func (*Channel) ProtoMessage()               {}
func (*Channel) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Channel) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Channel) GetRows() []*Row {
	if m != nil {
		return m.Rows
	}
	return nil
}

type Row struct {
	Data []float64 `protobuf:"fixed64,1,rep,packed,name=data" json:"data,omitempty"`
}

func (m *Row) Reset()                    { *m = Row{} }
func (m *Row) String() string            { return proto.CompactTextString(m) }
func (*Row) ProtoMessage()               {}
func (*Row) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Row) GetData() []float64 {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*Frame)(nil), "images.Frame")
	proto.RegisterType((*Plane)(nil), "images.Plane")
	proto.RegisterType((*Channel)(nil), "images.Channel")
	proto.RegisterType((*Row)(nil), "images.Row")
}

func init() { proto.RegisterFile("images.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 286 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x52, 0x4f, 0x4b, 0xfc, 0x30,
	0x10, 0x25, 0xfd, 0x93, 0xdf, 0x6f, 0xa7, 0x8a, 0x4b, 0x10, 0x89, 0x82, 0xb8, 0x14, 0x84, 0x82,
	0x50, 0x50, 0x2f, 0xea, 0xc1, 0x83, 0xa2, 0x27, 0x0f, 0x92, 0x6f, 0x90, 0x75, 0xc3, 0xb6, 0xd8,
	0x4d, 0x97, 0x36, 0x5a, 0xf6, 0xcb, 0x7a, 0xf2, 0x83, 0x98, 0x4c, 0x52, 0xf1, 0xb0, 0x37, 0xf1,
	0x94, 0x79, 0x6f, 0xe6, 0xcd, 0xbc, 0x07, 0x81, 0x9d, 0x7a, 0x25, 0x97, 0xaa, 0x2f, 0xd7, 0x5d,
	0x6b, 0x5a, 0x46, 0x3d, 0xca, 0x3f, 0x08, 0xa4, 0x8f, 0x9d, 0x5c, 0x29, 0xc6, 0x20, 0xd1, 0xf6,
	0xe5, 0x64, 0x46, 0x8a, 0x89, 0xc0, 0x9a, 0xed, 0x43, 0x3a, 0xd4, 0x0b, 0x53, 0xf1, 0xc8, 0x92,
	0xa9, 0xf0, 0x80, 0x1d, 0x00, 0xad, 0x54, 0xbd, 0xac, 0x0c, 0x8f, 0x91, 0x0e, 0x88, 0x9d, 0x03,
	0x6d, 0xe4, 0x5c, 0x35, 0x3d, 0x4f, 0x66, 0x71, 0x91, 0x5d, 0x1c, 0x96, 0xe1, 0x24, 0x1e, 0x28,
	0x9f, 0xb0, 0xf7, 0xa0, 0x4d, 0xb7, 0x11, 0x61, 0x90, 0x9d, 0x02, 0x5d, 0x37, 0x52, 0xab, 0x9e,
	0xa7, 0x28, 0xd9, 0x1d, 0x25, 0xcf, 0x8e, 0x15, 0xa1, 0x79, 0x74, 0x0d, 0xd9, 0x0f, 0x35, 0x9b,
	0x42, 0xfc, 0xaa, 0x36, 0xc1, 0xa9, 0x2b, 0x9d, 0xd1, 0x77, 0xd9, 0xbc, 0x29, 0x34, 0x3a, 0x11,
	0x1e, 0xdc, 0x44, 0x57, 0x24, 0xff, 0xb4, 0x01, 0x71, 0xd9, 0x5f, 0x06, 0xc4, 0x03, 0x5b, 0x03,
	0x9e, 0xc1, 0xff, 0x97, 0x4a, 0x6a, 0xed, 0x44, 0x3e, 0xe2, 0xde, 0x28, 0xba, 0xf7, 0xbc, 0xf8,
	0x1e, 0xf8, 0x4d, 0xcc, 0x5b, 0xf8, 0x17, 0xf6, 0x6d, 0xcd, 0x79, 0x02, 0x49, 0xd7, 0x0e, 0xbd,
	0xd5, 0x39, 0x0b, 0xd9, 0x68, 0x41, 0xb4, 0x83, 0xc0, 0x46, 0x7e, 0x0c, 0xb1, 0x05, 0x36, 0x79,
	0xb2, 0x90, 0x46, 0x5a, 0x6d, 0x5c, 0x90, 0xbb, 0x68, 0x4a, 0x04, 0xe2, 0x39, 0xc5, 0x5f, 0x73,
	0xf9, 0x15, 0x00, 0x00, 0xff, 0xff, 0x68, 0x47, 0xab, 0x9f, 0x45, 0x02, 0x00, 0x00,
}
