syntax = "proto3";

package operators;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

import "geometry/geometry.proto";
import "parameters/parameters.proto";


service Operators {
    rpc List (ListOperatorsRequest) returns (ListOperatorsResponse) {
        option (google.api.http) = {
            get: "/organizations/{organization_id}/scenes/{scene_id}/operators"
        };
    }
    rpc Get (GetOperatorRequest) returns (Operator) {
        option (google.api.http) = {
            get: "/organizations/{organization_id}/scenes/{scene_id}/operators/{operator_id}"
        };
    }
    rpc Create (CreateOperatorRequest) returns (Operator) {
        option (google.api.http) = {
            post: "/organizations/{organization_id}/scenes/{scene_id}/operators"
            body: "operator"
        };
    }
    rpc Update (UpdateOperatorRequest) returns (Operator) {
        option (google.api.http) = {
            put: "/organizations/{organization_id}/scenes/{scene_id}/operators/{operator_id}"
            body: "operator"
        };
    }
    rpc Delete (DeleteOperatorRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/organizations/{organization_id}/scenes/{scene_id}/operators/{operator_id}"
        };
    }
    rpc Render (RenderOperatorRequest) returns (RenderOperatorResponse) {
        option (google.api.http) = {
            post: "/organizations/{organization_id}/scenes/{scene_id}/operators/{operator_id}:render"
            body: ""
        };
    }
}

message Operator {
    string id = 1;
    string name = 2;
    string context = 3;
    string type = 4;

    repeated parameters.Parameter parameters = 5;
}

message ListOperatorsRequest {
    string organization_id = 1;
    string scene_id = 2;
    int32 page_size = 3;
    string page_token = 4;
}

message ListOperatorsResponse {
    repeated Operator operators = 1;
    string next_page_token = 2;
}

message GetOperatorRequest {
    string organization_id = 1;
    string scene_id = 2;
    string operator_id = 3;
}

message CreateOperatorRequest {
    string organization_id = 1;
    string scene_id = 2;
    Operator operator = 3;
}

message UpdateOperatorRequest {
    string organization_id = 1;
    string scene_id = 2;
    string operator_id = 3;
    Operator operator = 4;
}

message DeleteOperatorRequest {
    string organization_id = 1;
    string scene_id = 2;
    string operator_id = 3;
}

message RenderOperatorRequest {
    string organization_id = 1;
    string scene_id = 2;
    string operator_id = 3;

    // TODO: use double?
    int32 frame = 4;
    geometry.BoundingBox2D bounding_box = 5;
}

message RenderOperatorResponse {
    string result_url = 1;
    string result_type = 2;
}
